#include <iostream>
#include <cstring>
#include <string>
#include <algorithm>
#include <queue>

using namespace std;

int grid[100][100];
int group[100][100];
int visited[100][100];

// (y,x), 상 하 좌 우
int dir[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };

void bfs_search(int y, int x, int cnt, int N) {

	queue<pair<int, int>> pos;
	pos.push(make_pair(y, x));
	group[y][x] = cnt;
	visited[y][x] = 1;

	while (!pos.empty()) {

		pair<int, int> cur = pos.front();
		pos.pop();

		int i;
		for (i = 0; i < 4; i++) {
			pair<int, int> next = make_pair(cur.first + dir[i][0], cur.second + dir[i][1]);

			if ((next.first >= 0 && next.first < N) &&
				(next.second >= 0 && next.second < N)) {

				if (grid[next.first][next.second] > 0 && !visited[next.first][next.second]) {

					pos.push(make_pair(next.first, next.second));
					visited[next.first][next.second] = 1;
					group[next.first][next.second] = cnt;
				}
			}
		}
	}
}

int find_cheese(int day, int max_day, int N) {
	
	if (day == max_day + 1) {
		return 0;
	}
	
	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++) {
			if (grid[i][j] == day) {
				grid[i][j] = 0;
			}
		}
	}

	int ret = 0;
	int cnt = 1;

	memset(group, 0, sizeof(group));
	memset(visited, 0, sizeof(visited));

	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++) {
			if (grid[i][j] > 0 && !visited[i][j]) {
				bfs_search(i, j, cnt, N);
				cnt++;
			}
		}
	}

	ret = max(cnt - 1, find_cheese(day + 1, max_day, N));

	return ret;
}

int main()
{
	int T;
	cin >> T;

	int i, j, k;
	for (i = 0; i < T; i++) {
		memset(grid, 0, sizeof(grid));

		int answer = 0;

		int max_day = -1;

		int N;
		cin >> N;

		for (j = 0; j < N; j++) {
			for (k = 0; k < N; k++) {
				cin >> grid[j][k];

				if (max_day < grid[j][k]) {
					max_day = grid[j][k];
				}
			}
		}
		
		answer = find_cheese(0, max_day, N);

		cout << "#" << i + 1 << " " << answer << "\n";
	}

	return 0;
}
