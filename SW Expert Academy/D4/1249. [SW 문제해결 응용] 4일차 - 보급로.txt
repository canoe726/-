#include <iostream>
#include <string>
#include <cstring>
#include <queue>
#include <algorithm>

using namespace std;

const int INF = 987654321;

int map[100][100];
int dp[100][100];
// (y,x), 상 하 좌 우
int dir[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };

void bfs_search(int n) {
	queue<pair<int, int>> q;
	q.push(make_pair(0, 0));
	dp[0][0] = 0;

	while (!q.empty()) {
		pair<int, int> pos = q.front();
		q.pop();

		for (int i = 0; i < 4; i++) {
			int cur_y = pos.first + dir[i][0];
			int cur_x = pos.second + dir[i][1];

			if ((cur_y >= 0 && cur_y < n) &&
				(cur_x >= 0 && cur_x < n)) {

				if (dp[cur_y][cur_x] > dp[pos.first][pos.second] + map[cur_y][cur_x]) {
					dp[cur_y][cur_x] = dp[pos.first][pos.second] + map[cur_y][cur_x];
					q.push(make_pair(cur_y, cur_x));
				}	
			}
		}
	}
}

int main()
{
	int T;
	cin >> T;

	int i, j, k;
	for (i = 0; i < T; i++) {
		memset(map, 0, sizeof(map));

		int answer = 0;

		int N;
		cin >> N;

		for (j = 0; j < N; j++) {
			string input;
			cin >> input;

			for (k = 0; k < input.size(); k++) {
				map[j][k] = input[k] - '0';

				dp[j][k] = INF;
			}
		}

		bfs_search(N);

		cout << "#" << i + 1 << " " << dp[N - 1][N - 1] << "\n";
	}

	return 0;
}
