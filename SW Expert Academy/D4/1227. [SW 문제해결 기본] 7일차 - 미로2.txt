#include<iostream>
#include<cstring>
#include<string>
#include<queue>

using namespace std;

int visited[100][100];
int maze[100][100];
// (y,x), 상,하,좌,우
int dir[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };

bool bfs_search(int start_y, int start_x, int end_y, int end_x) {

	bool ret = false;

	queue<pair<int, int>> q;
	q.push(make_pair(start_y, start_x));
	visited[start_y][start_x] = 1;

	while (!q.empty()) {
		pair<int,int> cur = q.front();

		if (cur.first == end_y && cur.second == end_x) {
			ret = true;
			break;
		}

		q.pop();

		for (int i = 0; i < 4; i++) {
			pair<int, int> pos;
			// y
			pos.first = cur.first + dir[i][0];
			// x
			pos.second = cur.second + dir[i][1];

			if ((pos.first >= 0 && pos.first < 100) &&
				(pos.second >= 0 && pos.second < 100)) {

				if (maze[pos.first][pos.second] != 1) {
					if (!visited[pos.first][pos.second]) {
						visited[pos.first][pos.second] = 1;
						q.push(pos);
					}
				}
			}
		}
	}

	return ret;
}

int main()
{
	int T = 10;
	// cin >> T;

	int i, j, k;
	for (i = 0; i < T; i++) {
		memset(maze, 0, sizeof(maze));
		memset(visited, 0, sizeof(visited));

		int answer = 0;

		int N;
		cin >> N;

		int start_y = -1;
		int start_x = -1;

		int end_y = -1;
		int end_x = -1;

		for (j = 0; j < 100; j++) {
			string input;
			cin >> input;
			
			for (k = 0; k < input.size(); k++) {
				maze[j][k] = input[k] - '0';

				// 시작지점
				if (maze[j][k] == 2) {
					start_y = j;
					start_x = k;
				}
				/// 도작지점
				if (maze[j][k] == 3) {
					end_y = j;
					end_x = k;
				}
			}
		}

		if (bfs_search(start_y, start_x, end_y, end_x)) {
			answer = 1;
		}
		else {
			answer = 0;
		}

		cout << "#" << i + 1 << " " << answer << "\n";
	}
}
