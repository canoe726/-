#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>
#include<tuple>
#include<map>
#include<climits>

using namespace std;

// (y,x) : 상 하 좌 우
int dir[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };

char board[102][102];
bool key[26];
bool visited[102][102];

queue<pair<int, int>> pos;
queue<pair<int, int>> door[26];

int bfs(int h, int w, int y, int x) {
	int answer = 0, i;

	pos.push(make_pair(y, x));
	visited[y][x] = true;

	while (!pos.empty()) {
		int cy = pos.front().first;
		int cx = pos.front().second;
		pos.pop();

		for (i = 0; i < 4; i++) {
			int ny = cy + dir[i][0];
			int nx = cx + dir[i][1];

			if (ny < 0 || ny >= h || nx < 0 || nx >= w) continue;
			if (visited[ny][nx]) continue;

			char cur = board[ny][nx];
			if (cur == '*') continue;

			visited[ny][nx] = true;

			if (cur >= 'A' && cur <= 'Z') {
				if (key[cur - 'A']) {			// 키가 있으면 다음으로 이동
					pos.push(make_pair(ny, nx));
				}
				else {							// 키가 없으면 알파벳으로 이동
					door[cur - 'A'].push(make_pair(ny, nx));
				}
			}
			else if (cur >= 'a' && cur <= 'z') {
				pos.push(make_pair(ny, nx));

				if (!key[cur - 'a']) {			// 키를 발견하면 문의 위치를 전부 현재 큐로 이동
					key[cur - 'a'] = true;
					while (!door[cur - 'a'].empty()) {
						pos.push(door[cur - 'a'].front());
						door[cur - 'a'].pop();
					}
				}
			}
			else if (cur == '.') {
				pos.push(make_pair(ny, nx));
			}
			else if (cur == '$') {
				answer += 1;
				pos.push(make_pair(ny, nx));
			}
		}
	}

	return answer;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int T;
	cin >> T;

	int t, i, j;
	for (t = 0; t < T; t++) {
		int h, w;
		cin >> h >> w;

		h += 2;
		w += 2;

		// 초기화
		memset(board, '\0', sizeof(board));
		memset(key, false, sizeof(key));
		memset(visited, false, sizeof(visited));

		queue<pair<int, int>> empty;
		swap(pos, empty);
		for (i = 0; i < 26; i++) {
			queue<pair<int, int>> empty;
			swap(door[i], empty);
		}

		for (i = 0; i < h; i++) {
			for (j = 0; j < w; j++) {
				// 바깥에서 진입하도록 맵 설정
				if ((i == 0) || (j == 0) || (i == h - 1) || (j == w - 1)) {
					board[i][j] = '.';
					continue;
				}
				cin >> board[i][j];
			}
		}

		string input;
		cin >> input;

		if (input[0] != '0') {
			for (i = 0; i < input.size(); i++) {
				key[input[i] - 'a'] = true;
			}
		}

		cout << bfs(h, w, 0, 0) << "\n";
	}
}
