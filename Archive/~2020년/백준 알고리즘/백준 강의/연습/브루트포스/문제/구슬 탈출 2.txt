#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>
#include<tuple>

using namespace std;

const int LIMIT = 10;

// (y,x) : 상 하 좌 우 : 0 1 2 3
int direction[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };


vector<int> gen_dir(int dir) {
	vector<int> a(LIMIT);
	for (int i = 0; i < LIMIT; i++) {
		a[i] = dir & 3;		// dir % 4
		dir = dir >> 2;		// dir / 4
	}
	return a;
}

bool valid(vector<int> dir) {
	for (int i = 0; i < LIMIT - 1; i++) {
		if (dir[i] == 0 && dir[i + 1] == 1) return false;
		if (dir[i] == 1 && dir[i + 1] == 0) return false;
		if (dir[i] == 2 && dir[i + 1] == 3) return false;
		if (dir[i] == 3 && dir[i + 1] == 2) return false;
		if (dir[i] == dir[i + 1]) return false;
	}
	return true;
}

// 구슬이 움직였는지, 구슬이 빠졌는지
pair<bool, bool> simulate(vector<string> &board, int k, int &py, int &px) {
	if (board[py][px] == '.') return make_pair(false, false);

	int N = board.size();
	int M = board[0].size();
	bool moved = false;
	while (true) {
		int ny = py + direction[k][0];
		int nx = px + direction[k][1];

		if (ny < 0 || ny >= N || nx < 0 || nx >= M) continue;

		if (board[ny][nx] == '#') {
			return make_pair(moved, false);
		}
		else if (board[ny][nx] == 'R' || board[ny][nx] == 'B') {
			return make_pair(moved, false);
		}
		else if (board[ny][nx] == '.') {
			swap(board[py][px], board[ny][nx]);
			py = ny;
			px = nx;
			moved = true;
		}
		else if(board[ny][nx] == 'O') {
			board[py][px] = '.';
			moved = true;
			return make_pair(moved, true);
		}
	}

	return make_pair(false, false);
}

int check(vector<string> board, vector<int> &dir) {
	int N = board.size();
	int M = board[0].size();
	int hy, hx, ry, rx, by, bx;
	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			if (board[i][j] == 'O') {
				hy = i; hx = j;
			}
			if (board[i][j] == 'R') {
				ry = i, rx = j;
			}
			if (board[i][j] == 'B') {
				by = i, bx = j;
			}
		}
	}

	int cnt = 0;
	for (int k : dir) {
		cnt += 1;
		bool rh = false, bh = false;
		while (true) {
			auto rp = simulate(board, k, ry, rx);
			auto bp = simulate(board, k, by, bx);

			if (rp.first == false && bp.first == false) break;
			
			if (rp.second) rh = true;
			if (bp.second) bh = true;
		}

		if (rh) return -1;
		if (bh) return cnt;
	}

	return -1;
}

int main() {
	int N, M;
	cin >> N >> M;

	vector<string> board(N);
	int i;
	for (i = 0; i < N; i++) {
		cin >> board[i];
	}

	int answer = -1;
	for (i = 0; i < (1 << (LIMIT * 2)); i++) {
		vector<int> dir = gen_dir(i);
		if (!valid(dir)) continue;
		int cur = check(board, dir);
		if (cur == -1) continue;
		answer = max(answer, cur);
	}

	cout << answer << "\n";
}
