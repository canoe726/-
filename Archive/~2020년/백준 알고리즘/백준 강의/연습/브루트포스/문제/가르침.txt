#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>
#include<tuple>

using namespace std;

bool alphabet[26];

// a, n, t, i, c 는 무조건 배워야 한다.

int count(vector<int> words, int mask) {
	int ret = 0;
	for (int word: words) {
		// ~ mask : 내가 배우지 않은 알파벳
		// int 형은 32 비트 이므로 알파벳 개수인 26 비트만 계산 하기 위함
		// (1 << n) - 1 : n 개의 1 비트로 이루어진 수
		// ~ mask 의 1 은 배우지 않은 알파벳이므로 0 이상이면 단어를 읽을 수 없음
		if ((word & ((1 << 26) - 1 - mask)) == 0) {
			ret += 1;
		}
	}
	return ret;
}

// mask : 내가 이때 까지 배운 알파벳
int go(vector<int> words, int mask, int idx, int K) {
	if (K < 0) return 0;

	if (idx == 26) {
		return count(words, mask);
	}

	int ret = 0;

	alphabet[idx] = true;
	// 사용한 알파벳의 비트마스크를 mask 변수로 표현해줌
	ret = max(ret, go(words, mask | (1 << idx), idx + 1, K - 1));
	alphabet[idx] = false;

	if (idx != 'a' - 'a' && idx != 'n' - 'a' && idx != 't' - 'a' && idx != 'i' - 'a' && idx != 'c' - 'a') {
		// a, n, t, i, c 가 아닌 경우 다른 알파벳을 배워서 경우의 수를 만들 수 있음
		ret = max(ret, go(words, mask, idx + 1, K));
	}

	return ret;
}

int main() {
	int N, K;
	cin >> N >> K;

	// 실제 단어가 어떤 순서로 구성되어 있는지보다 무슨 알파벳을 사용했는지가 중요함
	vector<int> words(N);
	for (int i = 0; i < N; i++) {
		string str;
		cin >> str;
		
		for (char x : str) {
			// 단어가 가진 알파벳의 비트마스크
			words[i] |= (1 << (x - 'a'));
		}
	}

	cout << go(words, 0, 0, K) << "\n";
}