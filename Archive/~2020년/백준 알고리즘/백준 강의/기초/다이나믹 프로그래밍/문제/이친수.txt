#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std;

// d[i][j] = i자리 이친수의 개수, 마지막 수가 j로 끝나는 경우의 수
long long d[91][2];

// 0으로 시작할 수 없기 때문에, d[1][0] = 0 이다.
// j=0 인 경우, i-1 번째 자리에 0과 1이 올 수 있다.
// j=1 인 경우, i-1 번째 자리에 0만 올 수 있다.

long long bottom_up(int n) {
	d[1][0] = 0;
	d[1][1] = 1;

	for (int i = 2; i <= n; i++) {
		for (int j = 0; j < 2; j++) {
			if (j == 0) d[i][j] = d[i - 1][0] + d[i - 1][1];
			else		d[i][j] = d[i - 1][0];
		}
	}
	
	return d[n][0] + d[n][1];
}

// d[i] = i자리 이친수의 개수
long long dp[91];

// 마지막 수가 0인 경우, i-1 번째 자리에는 0과 1이 올 수 있다.
// 마지막 수가 1인 경우, i-1 번째 자리에는 0만 올 수 있고, i-2 번째 자리에는 0과 1이 올 수 있다.

long long one_dimension(int n) {
	dp[0] = 0;
	dp[1] = 1;

	for (int i = 2; i <= n; i++) dp[i] = dp[i - 1] + dp[i - 2];

	return dp[n];
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N;
	cin >> N;

	// cout << bottom_up(N) << "\n";
	cout << one_dimension(N) << "\n";
}