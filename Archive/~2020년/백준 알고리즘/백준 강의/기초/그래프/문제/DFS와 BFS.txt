#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>

using namespace std;

vector<vector<int>> edge(1001);
bool visited[1001];
vector<int> answer;

void dfs_search(int V) {
	answer.push_back(V);
	visited[V] = true;

	for (int i = 0; i < edge[V].size(); i++) {
		if (!visited[edge[V][i]]) {
			dfs_search(edge[V][i]);
		}
	}
}

void bfs_search(int V) {
	queue<int> q;
	q.push(V);
	answer.push_back(V);
	visited[V] = true;

	while (!q.empty()) {
		int cur = q.front();
		q.pop();

		for (int i = 0; i < edge[cur].size(); i++) {
			if (!visited[edge[cur][i]]) {
				q.push(edge[cur][i]);
				visited[edge[cur][i]] = true;

				answer.push_back(edge[cur][i]);
			}
		}
	}
}

int main() {
	int N, M, V;
	cin >> N >> M >> V;

	int i;
	for (i = 0; i < M; i++) {
		int s, e;
		cin >> s >> e;

		edge[s].push_back(e);
		edge[e].push_back(s);
	}

	for (i = 1; i <= N; i++) {
		sort(edge[i].begin(), edge[i].end());
	}

	memset(visited, false, sizeof(visited));
	answer.clear();
	dfs_search(V);
	for (i = 0; i < answer.size(); i++) {
		cout << answer[i] << " ";
	}
	cout << "\n";

	memset(visited, false, sizeof(visited));
	answer.clear();
	bfs_search(V);
	for (i = 0; i < answer.size(); i++) {
		cout << answer[i] << " ";
	}
	cout << "\n";
}