#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>

using namespace std;

vector<int> graph[20001];
int color[20001];

// 0 : 방문 X
// 1 : 그룹 A
// 2 : 그룹 B
void dfs_search(int node, int c) {
	color[node] = c;

	for (int i = 0; i < graph[node].size(); i++) {
		int next = graph[node][i];
		if (color[next] == 0) {
			dfs_search(next, 3 - c);
		}
	}
}

int main() {
	int T;
	cin >> T;

	int i, j, k;
	for (i = 0; i < T; i++) {
		int V, E;
		cin >> V >> E;

		// 초기화
		for (j = 1; j <= V; j++) {
			graph[j].clear();
			color[j] = 0;
		}

		for (j = 0; j < E; j++) {
			int s, e;
			cin >> s >> e;

			graph[s].push_back(e);
			graph[e].push_back(s);
		}

		for (j = 1; j <= V; j++) {
			if (color[j] == 0) {
				// 방문하지 않았다면, 그룹 나누기
				dfs_search(j, 1);
			}
		}

		// 같은 색깔의 그룹을 2번 방문하는지 검사
		bool ok = true;
		for (j = 1; j <= V; j++) {
			for (k = 0; k < graph[j].size(); k++) {
				int next = graph[j][k];
				if (color[j] == color[next]) {
					ok = false;
				}
			}
		}

		string answer = ok ? "YES" : "NO";
		cout << answer << "\n";
	}	
}