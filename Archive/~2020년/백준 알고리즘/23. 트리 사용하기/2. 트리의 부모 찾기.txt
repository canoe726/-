#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>

using namespace std;

vector<vector<int>> tree(100001);
int visited[100001] = { 0 };
int parent[100001] = { 0 };

void bfs_search(int start)
{
	queue<int> qu;

	qu.push(start);
	visited[start] = 1;

	while (!qu.empty())
	{
		int x = qu.front();
		qu.pop();

		int i;
		for (i = 0; i < tree[x].size(); i++)
		{
			int y = tree[x][i];
			
			if (visited[y] == 0)
			{
				qu.push(y);
				visited[y] = 1;
				parent[y] = x;
			}
		}
	}
}

int main()
{
	int N;
	cin >> N;

	int i;
	for (i = 0; i < N - 1; i++)
	{
		int left, right;
		cin >> left >> right;

		tree[left].push_back(right);
		tree[right].push_back(left);
	}

	for (i = 0; i < N - 1; i++)
	{
		sort(tree[i].begin(), tree[i].end());
	}

	bfs_search(1);

	for (i = 2; i <= N; i++)
	{
		cout << parent[i] << '\n';
	}
}


