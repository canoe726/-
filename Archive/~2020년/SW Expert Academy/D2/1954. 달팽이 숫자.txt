#include <iostream>
#include <queue>

using namespace std;

// (y,x) / right, down, left, up
int dir[4][2] = { {0,1},{1,0},{0,-1},{-1,0} };

vector<vector<int>> bfs_search(int N) {
	vector<vector<int>> ret(N, vector<int>(N));

	int visited[10][10] = { 0 };

	int num = 1;
	int index = 0;
	queue<pair<int, int>> cur;
	cur.push(make_pair(0, 0));
	ret[0][0] = num++;
	visited[0][0] = 1;

	while (!cur.empty()) {

		int cur_y = cur.front().first;
		int cur_x = cur.front().second;
		cur.pop();

		int next_y = cur_y + dir[index][0];
		int next_x = cur_x + dir[index][1];

		if ((next_y >= 0 && next_y < N) &&
			(next_x >= 0 && next_x < N) &&
			(!visited[next_y][next_x]) ) {

			cur.push(make_pair(next_y, next_x));
			ret[next_y][next_x] = num++;
			visited[next_y][next_x] = 1;
		}
		else {
			index++;
			if (index == 4) { index = 0; }
			cur.push(make_pair(cur_y, cur_x));
		}

		if (num > N*N) {
			break;
		}
	}

	return ret;
}

int main()
{
	int T;
	cin >> T;

	int i, j, k;
	for (i = 0; i < T; i++) {
		
		int N;
		cin >> N;

		vector<vector<int>> res = bfs_search(N);
		
		cout << "#" << i + 1 << "\n";
		for (j = 0; j < N; j++) {
			for (k = 0; k < N; k++) {
				cout << res[j][k] << " ";
			}
			cout << "\n";
		}
	}

	return 0;
}