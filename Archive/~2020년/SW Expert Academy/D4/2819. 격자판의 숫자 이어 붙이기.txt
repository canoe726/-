#include <iostream>
#include <cstring>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

char grid[4][4];
vector<string> numbers;

// (y,x), 상 하 좌 우
int dir[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };

void dfs_search(int y, int x, string str) {

	if (str.size() == 7) {
		numbers.push_back(str);
		return;
	}

	int i;
	for (i = 0; i < 4; i++) {
		int next_y = y + dir[i][0];
		int next_x = x + dir[i][1];

		if ((next_y >= 0 && next_y < 4) &&
			(next_x >= 0 && next_x < 4)) {

			string temp = str;
			temp.push_back(grid[next_y][next_x]);
			dfs_search(next_y, next_x, temp);
		}
	}
}

int main()
{
	int T;
	cin >> T;

	int i, j, k;
	for (i = 0; i < T; i++) {		
		memset(grid, 0, sizeof(grid));

		int answer = 0;

		for (j = 0; j < 4; j++) {
			for (k = 0; k < 4; k++) {
				cin >> grid[j][k];
			}
		}

		for (j = 0; j < 4; j++) {
			for (k = 0; k < 4; k++) {

				string s = "";
				s.push_back(grid[j][k]);
				dfs_search(j, k, s);
			}
		}

		sort(numbers.begin(), numbers.end());
		numbers.erase(unique(numbers.begin(), numbers.end()), numbers.end());

		cout << "#" << i + 1 << " " << numbers.size() << "\n";

		numbers.clear();
	}

	return 0;
}
