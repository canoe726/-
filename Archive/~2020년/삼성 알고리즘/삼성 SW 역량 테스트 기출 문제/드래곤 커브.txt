/*
- 풀어야할때 알아야 할점
1. 사각형의 개수는 임의의 map을 만들어서 4개의 점이 모두 1이면 센다.
2. 커브의 세대를 거듭해도 좌표는 (0,0) ~ (100,100) 까지가 유효하다.
3. 이전 세대의 가장 끝 점을 기준으로 모든 좌표를 반시계 방향으로 회전 시킨 후,
회전시킨 끝 좌표가 이전 세대의 끝 점과 같게 되도록 모든 좌표를 이동시켜준다.
그 후 첫 번째 값을 제외하고 역순으로 pos 좌표뒤에 붙이면 커브가 완성된다.
4. 0 세대는 직접 만들어 줘야한다.
5. 반시계 회전 변환 행렬은
(x`) = (cos(90) -sin(90)) (x)
(y`) = (sin(90)  cos(90)) (y) 이다.
*/

#include<iostream>
#include<cstring>
#include<vector>
#include<queue>

using namespace std;

struct INFO {
	int x;
	int y;
	int d;
	int g;
};

struct POS {
	int x;
	int y;
};

int N;

// (y,x), 우, 상, 좌, 하
int dir[4][2] = { {0,1},{-1,0},{0,-1},{1,0} };

const int map_len = 101;
int map[map_len][map_len];

vector<INFO> gene;

int find_rect() {
	int ret = 0;

	int i, j, k, l;
	for (i = 0; i < map_len - 1; i++) {
		for (j = 0; j < map_len - 1; j++) {
			int cnt = 0;
			for (k = 0; k < 2; k++) {
				for (l = 0; l < 2; l++) {
					if (map[i + k][j + l] == 1) {
						cnt += 1;
					}
				}
			}

			if (cnt == 4) {
				ret += 1;
			}
		}
	}

	return ret;
}

vector<POS> pos;

void make_curve(int idx) {
	// 시작 선분 만들기, 0 세대
	int start_y = gene[idx].y;
	int start_x = gene[idx].x;

	pos.push_back({ start_x, start_y });
	pos.push_back({ start_x + dir[gene[idx].d][1], start_y + dir[gene[idx].d][0] });

	int i, j;
	for (i = 0; i < gene[idx].g; i++) {

		vector<POS> rotate(pos.size());

		for (j = 0; j < rotate.size(); j++) {
			rotate[j].y = 1 * pos[j].x;
			rotate[j].x = -1 * pos[j].y;
		}
		j -= 1;

		int y_cnt = pos[pos.size() - 1].y - rotate[j].y;
		int x_cnt = pos[pos.size() - 1].x - rotate[j].x;

		for (j = 0; j < rotate.size(); j++) {
			rotate[j].y += y_cnt;
			rotate[j].x += x_cnt;
		}

		for (j = rotate.size() - 2; j >= 0; j--) {
			pos.push_back(rotate[j]);
		}
		rotate.clear();
	}

	for (j = 0; j < pos.size(); j++) {
		map[pos[j].y][pos[j].x] = 1;
	}
	pos.clear();
}

int main() {
	memset(map, 0, sizeof(map));

	cin >> N;

	int i;
	for (i = 0; i < N; i++) {
		int x, y, d, g;
		cin >> x >> y >> d >> g;
		gene.push_back({ x, y, d, g });
	}

	for (i = 0; i < N; i++) {
		make_curve(i);
	}

	cout << find_rect() << "\n";
}