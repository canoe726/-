/*
- 풀어야할때 알아야 할점
1. 가로 기준 : i > (i+1) 인 경우, i < (i+1) 인 경우를 다르게 계산해준다.
2. 경사로를 추가했을 때 범위를 벗어나거나, 높이차이가 2이상, 경사로 놓은 곳이 겹칠 경우 셀 수 없다.
*/

#include<iostream>
#include<cstring>
#include<vector>
#include<cmath>

using namespace std;

int map[100][100];
vector<int> path;

int N, L;

bool can_go_way() {
	bool ret = true;

	int i, j;

	vector<int> visited = vector<int>(path.size());
	for (i = 0; i < path.size(); i++) {
		visited[i] = 0;
	}

	for (i = 0; i < path.size() - 1; i++) {
		if (abs(path[i] - path[i + 1]) > 1) {
			ret = false;
			break;
		}

		if (path[i] > path[i + 1]) {
			for (j = 1; j <= L; j++) {
				if (i + j >= N) {
					ret = false;
					break;
				}
				else if (visited[i + j]) {
					ret = false;
					break;
				}
				else {
					if (path[i + 1] != path[i + j]) {
						ret = false;
						break;
					}
				}
				visited[i + j] = 1;
			}
		}
		else if (path[i] < path[i + 1]) {
			for (j = 0; j < L; j++) {
				if (i - j < 0) {
					ret = false;
					break;
				}
				else if (visited[i - j]) {
					ret = false;
					break;
				}
				else {
					if (path[i] != path[i - j]) {
						ret = false;
						break;
					}
				}
				visited[i - j] = 1;
			}
		}
		else {
			continue;
		}

		if (!ret) {
			break;
		}
	}

	return ret;
}

int main() {
	memset(map, 0, sizeof(map));

	cin >> N >> L;

	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++) {
			cin >> map[i][j];
		}
	}

	int answer = 0;

	// 가로 길 검사
	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++) {
			path.push_back(map[i][j]);
		}
		if (can_go_way()) {
			answer += 1;
		}

		path.clear();
	}

	// 세로 길 검사
	for (j = 0; j < N; j++) {
		for (i = 0; i < N; i++) {
			path.push_back(map[i][j]);
		}
		if (can_go_way()) {
			answer += 1;
		}

		path.clear();
	}

	cout << answer << "\n";
}