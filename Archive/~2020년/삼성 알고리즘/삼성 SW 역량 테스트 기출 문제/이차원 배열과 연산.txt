/*
- 풀어야할때 알아야 할점
1. 0초부터 시작해서 100초까지 연산을 적용할 수 있다.
2. 먼저 배열의 숫자를 검사한 후 R, C 연산을 수행한다.
3. 횟수, 수 순으로 오름차순 정렬한다.
4. y, x의 index가 100 이상이면 나머지 값은 버린다.
*/

#include<iostream>
#include<cstring>
#include<climits>
#include<algorithm>
#include<vector>

using namespace std;

int r, c, k;

int A[101][101];
int A_r = 3;
int A_c = 3;

int n_cnt[101];

bool cmp(pair<int, int> a, pair<int, int> b) {
	if (a.second == b.second) {		// 횟수가 같으면 수 오름차순
		return a.first < b.first;
	}
	else {
		return a.second < b.second;
	}
}

void find_answer() {
	vector<vector<pair<int, int>>> num;
	vector<pair<int, int>> input;

	int i, j;
	if (A_r >= A_c) {		// R 연산
		for (i = 0; i < A_r; i++) {
			memset(n_cnt, 0, sizeof(n_cnt));

			for (j = 0; j < A_c; j++) {
				n_cnt[A[i][j]] += 1;
			}

			for (j = 1; j <= 100; j++) {
				if (n_cnt[j] > 0) {
					input.push_back(make_pair(j, n_cnt[j]));
				}
			}
			num.push_back(input);
			input.clear();
		}											// 모든 행의 수와 개수를 찾는다.

		for (i = 0; i < num.size(); i++) {			// 정렬한다.
			sort(num[i].begin(), num[i].end(), cmp);
		}

		memset(A, 0, sizeof(A));		// 값을 대입한다.

		int r_idx = 0, m_c_idx = 0;
		for (i = 0; i < num.size(); i++) {
			int c_idx = 0;
			for (j = 0; j < num[i].size(); j++) {
				if (c_idx >= 100) {
					break;
				}
				A[r_idx][c_idx++] = num[i][j].first;
				A[r_idx][c_idx++] = num[i][j].second;
			}
			if (m_c_idx < c_idx) { m_c_idx = c_idx; }

			r_idx++;
		}

		A_c = m_c_idx;

		num.clear();
	}
	else {				// C 연산
		for (i = 0; i < A_c; i++) {
			memset(n_cnt, 0, sizeof(n_cnt));

			for (j = 0; j < A_r; j++) {
				n_cnt[A[j][i]] += 1;
			}

			for (j = 1; j <= 100; j++) {
				if (n_cnt[j] > 0) {
					input.push_back(make_pair(j, n_cnt[j]));
				}
			}
			num.push_back(input);
			input.clear();
		}											// 모든 행의 수와 개수를 찾는다.

		for (i = 0; i < num.size(); i++) {			// 정렬한다.
			sort(num[i].begin(), num[i].end(), cmp);
		}

		memset(A, 0, sizeof(A));		// 값을 대입한다.

		int c_idx = 0, m_r_idx = 0;
		for (i = 0; i < num.size(); i++) {
			int r_idx = 0;
			for (j = 0; j < num[i].size(); j++) {
				if (r_idx >= 100) {
					break;
				}
				A[r_idx++][c_idx] = num[i][j].first;
				A[r_idx++][c_idx] = num[i][j].second;
			}
			if (m_r_idx < r_idx) { m_r_idx = r_idx; }

			c_idx++;
		}

		A_r = m_r_idx;

		num.clear();
	}
}

int main() {
	memset(A, 0, sizeof(A));

	cin >> r >> c >> k;

	r -= 1;
	c -= 1;

	int i, j;
	for (i = 0; i < 3; i++) {
		for (j = 0; j < 3; j++) {
			cin >> A[i][j];
		}
	}

	bool answer = false;
	for (i = 0; i < 101; i++) {
		if (A[r][c] == k) {
			answer = true;
			break;
		}
		find_answer();
	}

	if (answer) {
		cout << i << "\n";
	}
	else {
		cout << -1 << "\n";
	}
}