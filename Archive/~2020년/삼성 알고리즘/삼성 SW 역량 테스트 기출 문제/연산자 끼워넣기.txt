/*
- 풀어야할때 알아야 할점
1. 모든 연산자를 조합하는 경우의 수는 next_permutation으로 구할 수 있다.
2. 구한 연산자를 바탕으로 값을 계산할 때는 스택을 통해 값을 저장한 후 구해준다.
*/

#include<iostream>
#include<cstring>
#include<vector>
#include<algorithm>
#include<stack>
#include<climits>

using namespace std;

stack<int> s;

int A[11];
int operators[4];

int main() {
	memset(A, 0, sizeof(A));
	memset(operators, 0, sizeof(operators));

	int N;
	cin >> N;

	int i, j;
	for (i = 0; i < N; i++) {
		cin >> A[i];
	}

	for (i = 0; i < 4; i++) {
		cin >> operators[i];
	}

	vector<int> op;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < operators[i]; j++) {
			op.push_back(i);
		}
	}

	int min_value = INT_MAX;
	int max_value = INT_MIN;

	do {
		int result;

		switch (op[0]) {
		case 0:			// +
			s.push(A[0] + A[1]);
			break;
		case 1:			// -
			s.push(A[0] - A[1]);
			break;
		case 2:			// *
			s.push(A[0] * A[1]);
			break;
		case 3:			// /
			s.push(A[0] / A[1]);
			break;
		}

		for (i = 1; i < op.size(); i++) {
			int temp;
			switch (op[i]) {
			case 0:			// +
				temp = s.top() + A[i + 1];
				s.pop();
				s.push(temp);
				break;
			case 1:			// -
				temp = s.top() - A[i + 1];
				s.pop();
				s.push(temp);
				break;
			case 2:			// *
				temp = s.top() * A[i + 1];
				s.pop();
				s.push(temp);
				break;
			case 3:			// /
				temp = s.top() / A[i + 1];
				s.pop();
				s.push(temp);
				break;
			}
		}

		result = s.top();
		s.pop();

		if (result > max_value) {
			max_value = result;
		}
		if (result < min_value) {
			min_value = result;
		}

	} while (next_permutation(op.begin(), op.end()));

	cout << max_value << "\n";
	cout << min_value << "\n";
}