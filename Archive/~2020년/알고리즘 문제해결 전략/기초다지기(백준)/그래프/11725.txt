#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>

using namespace std;

vector<int> tree[100001];
int visited[100001] = { 0 };
int parent[100001] = { 0 };

void bfs_search(int start)
{
	int i;
	queue<int> q;
	q.push(start);

	while (!q.empty())
	{
		int cur = q.front();
		visited[cur] = 1;
		q.pop();

		for (i = 0; i < tree[cur].size(); i++)
		{
			if (!visited[tree[cur][i]])
			{
				q.push(tree[cur][i]); 
				parent[tree[cur][i]] = cur;
			}
		}
	}
}

int main()
{
	int N;
	cin >> N;

	int i;
	for (i = 0; i < N - 1; i++)
	{
		int s, e;
		cin >> s >> e;

		tree[s].push_back(e);
		tree[e].push_back(s);
	}

	for (i = 1; i <= N; i++)
	{
		sort(tree[i].begin(), tree[i].end());
	}

	bfs_search(1);

	for (i = 2; i <= N; i++)
	{
		cout << parent[i] << "\n";
	}
}


