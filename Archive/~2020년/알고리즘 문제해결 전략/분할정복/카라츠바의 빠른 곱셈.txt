#include<iostream>
#include<algorithm>
#include<vector>
#include<string>

using namespace std;

// 2중 for문 큰 수 곱셈
vector<int> mul_big_nums(vector<int> a, vector<int> b)
{
	int v_size = a.size() + b.size() - 1;
	vector<int> res(v_size);

	int idx = v_size - 1;
	int i, j;
	for (i = b.size() - 1; i >= 0; i--)
	{
		for (j = a.size() - 1; j >= 0; j--)
		{
			// 자리수 올림 미적용
			res[idx - (a.size() - 1 - j)] += b[i] * a[j];
		}
		idx--;
	}

	// 자리수 올림 적용
	for (i = v_size - 1; i > 0; i--)
	{
		int num = res[i] % 10;
		int plus = (res[i] - num) / 10;

		res[i] = num;
		res[i - 1] += plus;
	}

	return res;
}

// 카라츠바 곱셈 재귀
vector<int> karatsuba(vector<int> a, vector<int> b)
{
	// 기저사례
	if (a.size() == 0 || b.size() == 0) { return vector<int>(); }
	// a가 항상 큰 수
	if (a.size() < b.size()) { return karatsuba(b, a); }
	// 시간 향상을 위함
	// if (a.size() < 50 || b.size() < 50) { return mul_big_nums(a, b); }

	int a_mid = a.size() / 2;
	int b_mid = b.size() / 2;

	vector<int> a0(a.begin(), a.begin() + a_mid);
	vector<int> a1(a.begin() + a_mid, a.end());
	vector<int> b0(b.begin(), b.begin() + b_mid);
	vector<int> b1(b.begin() + b_mid, b.end());

	vector<int> z0 = karatsuba(a0, b0);

	vector<int> z2 = karatsuba(a1, b1);

	return z0;
}

int main()
{
	string num1, num2;
	cin >> num1 >> num2;

	int i;
	vector<int> a(num1.size());
	vector<int> b(num2.size());
	for (i = 0; i < num1.size(); i++) { a[i] = num1[i] - '0'; }
	for (i = 0; i < num2.size(); i++) { b[i] = num2[i] - '0'; }

	vector<int> res = mul_big_nums(a, b);
	// 출력
	for (i = 0; i < res.size(); i++)
	{
		cout << res[i];
	}
	cout << endl;

	res = karatsuba(a, b);
	// 출력
	for (i = 0; i < res.size(); i++)
	{
		cout << res[i];
	}
	cout << endl;
}

