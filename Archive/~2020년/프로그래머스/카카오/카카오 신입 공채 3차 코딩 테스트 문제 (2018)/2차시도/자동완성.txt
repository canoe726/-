#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int solution(vector<string> words) {
	int answer = 0;

	sort(words.begin(), words.end());

	int i, j, count_up, count_down;
	for (i = 0; i < words.size(); i++)
	{
		int length = 0;

		count_up = 0;
		count_down = 0;
		
		if (i == 0)
		{
			if (words[i].size() >= words[i + 1].size())
			{
				length = words[i + 1].size();
			}
			else
			{
				length = words[i].size();
			}

			for (j = 0; j < length; j++)
			{
				if (words[i][j] == words[i + 1][j])
				{
					count_down++;
				}
				else
				{
					break;
				}
			}
		}
		else if (i == words.size() - 1)
		{
			if (words[i - 1].size() >= words[i].size())
			{
				length = words[i].size();
			}
			else
			{
				length = words[i - 1].size();
			}

			for (j = 0; j < length; j++)
			{
				if (words[i - 1][j] == words[i][j])
				{
					count_up++;
				}
				else
				{
					break;
				}
			}
		}
		else
		{
			// up
			if (words[i - 1].size() >= words[i].size())
			{
				length = words[i].size();
			}
			else
			{
				length = words[i - 1].size();
			}

			for (j = 0; j < length; j++)
			{
				if (words[i - 1][j] == words[i][j])
				{
					count_up++;
				}
				else
				{
					break;
				}
			}

			// down
			if (words[i].size() >= words[i + 1].size())
			{
				length = words[i + 1].size();
			}
			else
			{
				length = words[i].size();
			}

			for (j = 0; j < length; j++)
			{
				if (words[i][j] == words[i + 1][j])
				{
					count_down++;
				}
				else
				{
					break;
				}
			}

		}

		if (count_up >= count_down)
		{
			if (count_up == words[i].size())
			{
				answer += count_up;
			}
			else
			{
				answer += count_up + 1;
			}
		}
		else
		{
			if (count_down == words[i].size())
			{
				answer += count_down;
			}
			else
			{
				answer += count_down + 1;
			}
		}
	}
	
	return answer;
}

#include<iostream>

int main()
{
	int n;
	cin >> n;
	getchar();

	vector<string> words;

	int i;
	for (i = 0; i < n; i++)
	{
		string str;
		cin >> str;
		words.push_back(str);
	}

	cout << solution(words) << endl;
}

/*
3
go
gone
guild

4
abc
def
ghi
jklm

4
word
war
warrior
world

*/