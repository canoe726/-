#include <string>
#include <vector>
#include <algorithm>

using namespace std;

bool cmp(pair<double, int> a, pair<double, int> b)
{
	if (a.first == b.first)
	{
		return a.second < b.second;
	}
	else
	{
		return a.first > b.first;
	}
}

vector<int> solution(int N, vector<int> stages) {
	vector<int> answer;

	// percentage, stage
	vector<pair<double, int>> info;

	sort(stages.begin(), stages.end());

	int i, j;

	double rate = 0.0;
	int before_upper = 0;
	int upper = 0;
	int lower = stages.size();
	int current = 1;

	for (i = 0; i < stages.size(); i++)
	{
		int loop = 0;
		for (j = i; j < stages.size(); j++)
		{
			if (stages[j] == current)
			{
				loop++;
				upper++;
			}
			else
			{
				break;
			}
		}

		lower = lower - before_upper;

		if (lower == 0)
		{
			info.push_back(pair<double, int>(0.0, current));
		}
		else
		{
			rate = upper / (double)(lower);
			info.push_back(pair<double, int>(rate, current));
		}

		if (upper == 0)
		{
			i--;
		}
		else
		{
			i += (loop - 1);
		}

		before_upper = upper;
		upper = 0;
		current++;
	}

	sort(info.begin(), info.end(), cmp);

	for (i = 0; i < info.size(); i++)
	{
		if (info[i].second >= N + 1)
		{
			continue;
		}
		else
		{
			answer.push_back(info[i].second);
		}
	}

	return answer;
}

#include <iostream>

int main()
{
	int N;
	cin >> N;

	vector<int> stages;
	vector<int> result;

	int i;
	int len;
	cin >> len;
	for (i = 0; i < len; i++)
	{
		int su;
		cin >> su;
		stages.push_back(su);
	}

	result = solution(N, stages);
	for (i = 0; i < result.size(); i++)
	{
		cout << result[i] << endl;
	}
}
