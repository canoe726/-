#include <string>
#include <vector>
#include <algorithm>

using namespace std;

typedef struct INFO
{
	int x;
	int y;
	int number;
};

bool cmp(INFO a, INFO b)
{
	if (a.y == b.y)
	{
		return a.x < b.x;
	}

	return a.y > b.y;
}

typedef struct Node
{
	int x;
	int y;
	int number;
	Node *left;
	Node *right;
};

Node* CreateNode(int x,int y, int number)
{
	Node *newNode = (Node*)malloc(sizeof(Node));
	newNode->left = NULL;
	newNode->right = NULL;
	newNode->x = x;
	newNode->y = y;
	newNode->number = number;

	return newNode;
}

void makeBinaryTree(INFO current, Node *root)
{
	// left child
	if (root->left == NULL && root->x > current.x)
	{
		root->left = CreateNode(current.x, current.y, current.number);
	}
	else if (root->left != NULL && root->x > current.x)
	{
		makeBinaryTree(current, root->left);
	}
	// right child
	else if (root->right == NULL && root->x < current.x)
	{
		root->right = CreateNode(current.x, current.y, current.number);
	}
	else
	{
		makeBinaryTree(current, root->right);
	}
}

vector<int> preOrder(vector<int> *result, Node *current)
{
	if (current != NULL)
	{
		result->push_back(current->number);
		preOrder(result, current->left);
		preOrder(result, current->right);
	}

	return *result;
}

vector<int> postOrder(vector<int> *result, Node *current)
{
	if (current != NULL)
	{
		postOrder(result, current->left);
		postOrder(result, current->right);
		result->push_back(current->number);
	}

	return *result;
}

vector<vector<int>> solution(vector<vector<int>> nodeinfo) {
	vector<vector<int>> answer;

	vector<INFO> infos;

	int i;
	for (i = 0; i < nodeinfo.size(); i++)
	{
		INFO temp;
		temp.x = nodeinfo[i][0];
		temp.y = nodeinfo[i][1];
		temp.number = i + 1;

		infos.push_back(temp);
	}

	sort(infos.begin(), infos.end(), cmp);

	Node *root = NULL;
	root = CreateNode(infos[0].x, infos[0].y, infos[0].number);

	for (i = 1; i < nodeinfo.size(); i++)
	{
		makeBinaryTree(infos[i], root);
	}

	vector<int> result[2];
	result[0] = preOrder(&result[0], root);
	answer.push_back(result[0]);

	result[1] = postOrder(&result[1], root);
	answer.push_back(result[1]);

	return answer;
}

#include <iostream>

int main()
{
	int n;
	cin >> n;

	vector<vector<int>> nodeinfo;
	vector<vector<int>> result;

	int i, j;
	for (i = 0; i < n; i++)
	{
		int left, right;
		cin >> left >> right;

		vector<int> node;
		node.push_back(left);
		node.push_back(right);

		nodeinfo.push_back(node);
	}

	result = solution(nodeinfo);

	for (i = 0; i < 2; i++)
	{
		for (j = 0; j < result[i].size(); j++)
		{
			cout << result[i][j] << ' ';
		}
		cout << endl;
	}
}

/*
9
5 3
11 5
13 3
3 5
6 1
1 3
8 6
7 2
2 2

*/