#include <string>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

int T[7];
int datas[7] = { 0 };
vector<int> combination;

bool isPrime(int num)
{
	if (num < 2) { return false; }

	int i;
	for (i = 2; i < num; i++)
	{
		if (num%i == 0)
		{
			return false;
		}
	}

	return true;
}

void swap(int *i, int *j) {
	int temp = *i;
	*i = *j;
	*j = temp;
}

void process(int q, int *a)
{
	char temp[7];
	int i;
	
	for (i = q - 1; i >= 0; i--) {
		temp[i] = T[i] + '0';
	}

	int num = atoi(temp);

	int exist = 0;
	for (i = 0; i < combination.size(); i++)
	{
		if (num == combination[i])
		{
			exist = 1;
		}
	}

	if (exist == 0)
	{
		combination.push_back(num);

		if (isPrime(num))
		{
			*a += 1;
		}
	}
	
}

void Perm(int n, int r, int q, int *a) {
	if (r == 0) {
		process(q, a);
		return;
	}
	for (int i = n - 1; i >= 0; i--) {
		swap(&datas[i], &datas[n - 1]); //n-1을 모든 index와 swap해서 다양한 순서를 만든다.
		T[r - 1] = datas[n - 1];		  //T의 뒤에서부터 결과값 저장	
		Perm(n - 1, r - 1, q, a);		  //다음  index로 진행 	
		swap(&datas[i], &datas[n - 1]);
	}
}


int solution(string numbers) {
	int answer = 0;

	int i;
	for (i = 0; i < numbers.size(); i++)
	{
		datas[i] = numbers[i] - '0';
	}

	for (i = 0; i < numbers.size(); i++)
	{
		Perm(numbers.size(), i+1, i+1, &answer);
	}

	return answer;
}

int main()
{
	int N;
	cin >> N;

	int i;
	for (i = 0; i < N; i++)
	{
		string str;
		cin >> str;
		int ans = solution(str);
		cout << ans << endl;
	}
}


/*
2
17
011

*/