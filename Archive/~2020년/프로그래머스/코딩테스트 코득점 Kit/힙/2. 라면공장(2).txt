- 정답

#include <string>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;

int solution(int stock, vector<int> dates, vector<int> supplies, int k) {
	int answer = 0;

	priority_queue<int> pq;

	int i;
	int start = 0;
	
	while (stock < k)
	{
		for (i = start; i < dates.size(); i++)
		{
			if (dates[i] <= stock)
			{
				pq.push(supplies[i]);
			}
			else
			{
				start = i;
				break;
			}
		}		

		answer++;
		stock += pq.top();
		pq.pop();		
	}
	
	return answer;
}

int main()
{
	int stock;
	vector<int> dates;
	vector<int> supplies;
	int k;

	cin >> stock;

	int N;
	cin >> N;
	
	int i;
	for (i = 0; i < N; i++)
	{
		int su;
		cin >> su;
		dates.push_back(su);
	}
	for (i = 0; i < N; i++)
	{
		int su;
		cin >> su;
		supplies.push_back(su);
	}

	cin >> k;

	int answer = solution(stock, dates, supplies, k);
	cout << answer << endl;
}

/*
4
3
4 10 15
20 5 10
30

4
4
1 2 3 4
10 40 30 20
*/

- 오답
/*
#include <string>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;

class Custom
{
public :
	int value;
	Custom(int value) : value(value) {}
};

class cmp
{
public :
	bool operator() (Custom a, Custom b)
	{
		return a.value < b.value;
	}
};

int solution(int stock, vector<int> dates, vector<int> supplies, int k) {
	int answer = 0;

	priority_queue<Custom, vector<Custom>, cmp> pq;

	int i;
	int count = 0;
	
	while (k - stock >= 0)
	{
		count = 0;
		for (i = 0; i < dates.size(); i++)
		{
			if (stock >= dates[i])
			{
				pq.push(Custom(supplies[i]));
				count++;
			}
			else
			{
				break;
			}
		}		

		for (i = 0; i < count; i++)
		{
			dates.erase(dates.begin());
			supplies.erase(supplies.begin());
		}

		int pq_len = pq.size();
		for (i = 0; i < pq_len; i++)
		{
			if (stock < k)
			{
				stock += pq.top().value;
				pq.pop();
				pq_len--;
				i--;

				answer++;
			}
		}
	}

	
	return answer;
}

int main()
{
	int stock;
	vector<int> dates;
	vector<int> supplies;
	int k;

	cin >> stock;

	int N;
	cin >> N;
	
	int i;
	for (i = 0; i < N; i++)
	{
		int su;
		cin >> su;
		dates.push_back(su);
	}
	for (i = 0; i < N; i++)
	{
		int su;
		cin >> su;
		supplies.push_back(su);
	}

	cin >> k;

	int answer = solution(stock, dates, supplies, k);
	cout << answer << endl;
}

/*
4
3
4 10 15
20 5 10
30

4
4
1 2 3 4
10 40 30 20
*/
*/