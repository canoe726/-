#include <string>
#include <vector>

using namespace std;

int answer = 0;

char board[31][31] = { '\0' };
int temp_board[31][31] = { 0 };

int find_block(int y, int x)
{
	char start = board[y][x];

	if ((board[y][x] != '\0') &&
		(board[y + 1][x] != '\0') &&
		(board[y][x + 1] != '\0') &&
		(board[y + 1][x + 1] != '\0')) {

		if ((board[y + 1][x] == start) &&
			(board[y][x + 1] == start) &&
			(board[y + 1][x + 1] == start))
		{
			temp_board[y][x] = 1;
			temp_board[y + 1][x] = 1;
			temp_board[y][x + 1] = 1;
			temp_board[y + 1][x + 1] = 1;

			return 1;
		}
		else
		{
			return 0;
		}
	}
	else
	{
		return 0;
	}
}

void delete_square(int m, int n)
{
	int i, j;
	for (i = 0; i < m; i++)
	{
		for (j = 0; j < n; j++)
		{
			if (temp_board[i][j] == 1)
			{
				answer += 1;
				board[i][j] = '\0';
			}
		}
	}
}

void recur_down(int y, int x, int m)
{
	board[y + 1][x] = board[y][x];
	board[y][x] = '\0';

	if (y + 2 <= m)
	{
		if (board[y + 2][x] == '\0')
		{
			recur_down(y + 1, x, m);
		}
	}
}

void down_each_block(int m, int n)
{
	int i, j;
	for (i = m - 2; i >= 0; i--)
	{
		for (j = n - 1; j >= 0; j--)
		{
			if (board[i][j] != '\0' && board[i + 1][j] == '\0')
			{
				recur_down(i, j, m);
			}
		}
	}
}

int solution(int m, int n, vector<string> b) {

	int i, j;
	for (i = 0; i < b.size(); i++)
	{
		for (j = 0; j<b[i].size(); j++)
		{
			board[i][j] = b[i][j];
		}
	}	

	int count = 0;
	while (1)
	{
		count = 0;
		for (i = 0; i < b.size(); i++)
		{
			for (j = 0; j < b[i].size(); j++)
			{
				temp_board[i][j] = 0;
			}
		}

		// 블록 검사
		for (i = 0; i < m - 1; i++)
		{
			for (j = 0; j < n - 1; j++)
			{
				if (find_block(i, j) == 1)
				{
					count += 1;
				}
			}
		}
		if (count > 0)
		{
			delete_square(m, n);
			down_each_block(m, n);
		}
		else
		{
			break;
		}
	}

	return answer;
}

#include<iostream>

int main()
{
	int m, n;
	cin >> m >> n;

	vector<string> board;
	int i, j;
	for (i = 0; i < m; i++)
	{
		string str;
		cin >> str;

		board.push_back(str);
	}

	cout << solution(m, n, board) << '\n';
}