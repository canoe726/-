#include<iostream>
#include<string>

using namespace std;

//  (y, x)
//  [0]  [1]  [2]  [3]
//  *--  --*  *      *
//  |      |  |--  --|
int pattern[4][3][2] =
{
	{ { 0,0 },{ 0,1 },{ 1,0 } },
	{ { 0,0 },{ 0,1 },{ 1,1 } },
	{ { 0,0 },{ 1,0 },{ 1,1 } },
	{ { 0,0 },{ 1,0 },{ 1,-1 } }
};

int H, W;

bool cover_map(int map[][20], int y, int x, int idx, int mode)
{
	bool isOK = true;
	int i;
	for (i = 0; i < 3; i++)
	{
		int y_pos = y + pattern[idx][i][0];
		int x_pos = x + pattern[idx][i][1];

		// 범위 내에 있는지 검사
		if (y_pos < 0 || y_pos >= H || x_pos < 0 || x_pos >= W) { isOK = false; }
		if ((map[y_pos][x_pos] += mode) > 1) { isOK = false; }
	}

	return isOK;
}

int find_fill_way(int map[][20])
{
	int i, j;
	int y = -1, x = -1;
	// 왼쪽 위부터 채우므로, 왼쪽 위 좌표를 찾는다
	for (i = 0; i < H; i++)
	{
		for (j = 0; j < W; j++)
		{
			if (!map[i][j]) { y = i; x = j; break; }
		}
		if (y != -1) { break; }
	}

	// 모든 좌표가 채워져 있으므로 횟수 증가
	if (y == -1) { return 1; }

	int ret = 0;
	for (i = 0; i < 4; i++)
	{
		if (cover_map(map, y, x, i, 1)) { ret += find_fill_way(map); }
		cover_map(map, y, x, i, -1);
	}

	return ret;
}

int main()
{
	int C;
	cin >> C;

	int i, j, k;
	for (i = 0; i < C; i++)
	{
		int map[20][20];
		memset(map, 0, sizeof(map));
		cin >> H >> W;

		int cnt = 0;
		for (j = 0; j < H; j++)
		{
			string str;
			cin >> str;

			for (k = 0; k < str.size(); k++)
			{
				if (str[k] == '#') { map[j][k] = 1; }
				else { map[j][k] = 0; cnt++; }
			}
		}

		if (cnt % 3 == 0) { cout << find_fill_way(map) << "\n"; }
		else { cout << 0 << "\n"; }
	}
}
