#include<iostream>
#include<cstring>
#include<vector>

using namespace std;

vector<int> findPartialSum(vector<int> &arr) {
	vector<int> res(arr.size());

	int i;
	res[0] = arr[0];
	for (i = 1; i < arr.size(); i++) {
		res[i] = res[i - 1] + arr[i];
	}
	return res;
}

vector<int> findSquarePartialSum(vector<int> &arr) {
	vector<int> res(arr.size());

	int i;
	for (i = 0; i < arr.size(); i++) {
		res[i] = arr[i] * arr[i];
	}
	return res;
}

int findIntervalSum(vector<int> &arr, int start, int end) {
	if (start == 0) { return arr[end]; }
	return arr[end] - arr[start];
}

double findIntervalVariance(vector<int> &spSum, vector<int> &pSum, int start, int end) {

	double div = (end - start + 1);
	double mean = findIntervalSum(pSum, start, end) / div;

	double ret = findIntervalSum(spSum, start, end)
		- (2 * mean * findIntervalSum(pSum, start, end))
		+ (div * (mean * mean));

	return ret / div;
}

int main() {

	vector<int> arr;
	vector<int> partialSum;
	vector<int> squarePartialSum;

	int n, i;
	cin >> n;
	for (i = 0; i < n; i++) {
		int num;
		cin >> num;
		arr.push_back(num);
	}

	partialSum = findPartialSum(arr);
	squarePartialSum = findSquarePartialSum(partialSum);

	int a, b;
	cin >> a >> b;

	cout << "interval sum : " << findIntervalSum(partialSum, a, b) << endl;
	cout << "average : " << findIntervalSum(partialSum, a, b) / (double) (b - a + 1) << endl;
	cout << "interval variance : " << findIntervalVariance(squarePartialSum, partialSum, a, b) << endl;
}

/*
9
100 97 86 79 66 52 49 42 31
1 3

*/