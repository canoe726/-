#include<iostream>
#include<intrin.h>

using namespace std;

bool isToppingExist(int pizza, int n) {		// 토핑의 존재 여부 검사
	if (pizza & (1 << n)) {
		return true;
	}
	return false;
}

int bitCount(int x) {			// 집합에 포함된 원소의 개수 (켜진 비트의 수)
	if (x == 0) return 0;
	return x % 2 + bitCount(x / 2);
}

int main() {

	int x = 40;
	unsigned long idx;
	unsigned char isNonzero;

	cout << "bitCount(x) : " << bitCount(x) << endl;
	cout << "__popcnt(x) : " << __popcnt(x) << endl;	// 집합에 포함된 원소의 개수 (켜진 비트의 수) = bitCount

	isNonzero = _BitScanForward(&idx, x);		// LSB부터 1이 나오기 전 최하위 비트의 위치
	if (isNonzero) {
		cout << "x : " << x << ", " << "idx : " << idx << endl;
	}
	else {
		cout << "x is zero." << endl;
	}
	cout << (x & -x) << endl;		// LSB부터 1이 나오기 전 최하위 비트의 값
	cout << (x & (x - 1)) << endl;	// LSB부터 1이 나오기 전 최하위 비트의 값만 지우기

	int pizza = (1 << 20);	// 피자 토핑의 개수가 20개인 경우 - 공집합의 경우(1)
	pizza |= (1 << 0);			// 무조건 토핑을 올린다

	if (isToppingExist(pizza, 0)) {
		cout << "exist" << "\n";
	}
	else {
		cout << "not exist" << "\n";
	}

	pizza &= ~(1 << 0);			// 무조건 토핑을 뺀다
	if (isToppingExist(pizza, 0)) {
		cout << "exist" << "\n";
	}
	else {
		cout << "not exist" << "\n";
	}

	pizza ^= (1 << 0);			// 토핑이 있으면 빼고, 없으면 올린다
	if (isToppingExist(pizza, 0)) {
		cout << "exist" << "\n";
	}
	else {
		cout << "not exist" << "\n";
	}

	int hut = (1 << 2);

	int added = (pizza | hut);				// 합집합
	int intersection = (pizza & hut);		// 교집합
	int removed = (pizza & ~hut);			// a - b 차집합 
	int toggled = (pizza ^ hut);			// 둘 중 하나에만 포함
	
	cout << "pizza : " << pizza << endl;
	cout << "hut : " << hut << endl;

	cout << "added : " << added << endl;
	cout << "intersection : " << intersection << endl;
	cout << "removed : " << removed << endl;
	cout << "toggled : " << toggled << endl;

	int topping = (1 << 3) - 1;		// {페퍼로니, 피자, 양파} -> 모든 집합 순회 [공집합은 순회 X]
	cout << "topping : " << topping << endl;
	for (int subset = topping; subset; subset = ((subset - 1) & topping)) {
		cout << subset << " ";
	}
	cout << endl;
}