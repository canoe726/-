#include <string>
#include <vector>
#include <algorithm>

using namespace std;

typedef struct MUSIC
{
	int start_time_hour;
	int start_time_minute;
	int end_time_hour;
	int end_time_minute;
	int gap;
	string title;
	string note;
	string real_note;
};

typedef struct ANSWER_LIST
{
	string title;
	int playtime;
};

bool cmp(const ANSWER_LIST& a, const ANSWER_LIST& b)
{
	if (a.title.size() > b.title.size())
	{
		return a.title.size() > b.title.size();
	}
	else
	{
		return a.playtime > b.playtime;
	}
}

string solution(string m, vector<string> musicinfos) {
	string answer = "";

	vector<ANSWER_LIST> answer_list;

	int i, j, k;

	int m_size = 0;
	for (i = 0; i < m.size() - 1; i++)
	{
		if (m[i] != '#' && m[i + 1] == '#')
		{
			m_size++;
			i++;
		}
		else
		{
			m_size++;
		}
	}
	if (i == m.size() - 1)
	{
		if (m[i] != '#')
		{
			m_size++;
		}
	}

	for (i = 0; i < musicinfos.size(); i++)
	{
		char temp_char[2] = { '\0' };
		MUSIC info;
		
		// start time
		temp_char[0] = musicinfos[i][0];
		temp_char[1] = musicinfos[i][1];
		info.start_time_hour = atoi(temp_char);

		temp_char[0] = musicinfos[i][3];
		temp_char[1] = musicinfos[i][4];
		info.start_time_minute = atoi(temp_char);

		// end time
		temp_char[0] = musicinfos[i][6];
		temp_char[1] = musicinfos[i][7];
		info.end_time_hour = atoi(temp_char);

		temp_char[0] = musicinfos[i][9];
		temp_char[1] = musicinfos[i][10];
		info.end_time_minute = atoi(temp_char);

		int hour = 0, minute = 0;
		minute = (info.end_time_minute - info.start_time_minute);
		if (minute < 0)
		{
			minute += 60;
			hour -= 1;
		}
		hour += (info.end_time_hour - info.start_time_hour);

		info.gap = hour * 60 + minute;

		int next_index = -1;
		for (j = 12; j < musicinfos[i].size(); j++)
		{
			if (musicinfos[i][j] == ',')
			{
				next_index = j + 1;
				break;
			}
			else
			{
				info.title.push_back(musicinfos[i][j]);
			}
		}

		for (j = next_index; j < musicinfos[i].size(); j++)
		{
			info.note.push_back(musicinfos[i][j]);
		}

		int gap_size = info.gap;

		for (j = 0; j < gap_size; j++)
		{
			int plat = 0, size = info.note.size();

			if (j != gap_size)
			{
				if (info.note[j % size] != '#' && info.note[(j + 1) % size] == '#')
				{
					temp_char[0] = info.note[j % size];
					temp_char[1] = info.note[(j + 1) % size];
					plat = 1;
				}
			}

			if (plat == 0)
			{
				info.real_note.push_back(info.note[j % size]);
			}
			else
			{
				info.real_note.push_back(temp_char[0]);
				info.real_note.push_back(temp_char[1]);
				gap_size++;
				j++;
			}			
		}

		// find music
		int length = (info.real_note.size() - m.size());
		if (length < 0)
		{
			continue;
		}
		else
		{
			for (j = 0; j <= info.real_note.size() - m.size() ; j++)
			{
				int count = 0;

				for (k = 0; k < m.size() - 1; k++)
				{
					if (j + k + 1 < info.real_note.size())
					{
						if (info.real_note[j + k] != '#' && info.real_note[j + k + 1] == '#')
						{
							if (k + 1 < m.size())
							{
								if (m[k] != '#' && m[k + 1] == '#')
								{
									if (info.real_note[j + k] == m[k])
									{
										count++;
										k++;
									}
								}
							}
							else
							{
								break;
							}
						}
						else
						{
							if (info.real_note[j + k] == m[k])
							{
								count++;
							}
						}
					}
				}
				if (k == m.size() - 1)
				{
					if (m[k] != '#')
					{
						if (j + k + 1 < info.real_note.size())
						{
							if (info.real_note[j + k + 1] != '#')
							{
								if (info.real_note[j + k] == m[k])
								{
									count++;
								}
							}
						}
						else
						{
							if (info.real_note[j + k] == m[k])
							{
								count++;
							}
						}
					}
				}

				if (count == m_size)
				{
					ANSWER_LIST temp;
					temp.title = info.title;
					temp.playtime = info.gap;

					answer_list.push_back(temp);
					break;
				}
			}
		}
	}

	if (answer_list.size() != 0)
	{
		sort(answer_list.begin(), answer_list.end(), cmp);
		answer = answer_list[0].title;
	}
	else
	{
		answer = "(None)";
	}
	
	return answer;
}

#include<iostream>

int main()
{
	string m;
	cin >> m;

	int n, i;
	cin >> n;

	vector<string> musicinfos;

	for (i = 0; i < n; i++)
	{
		string str;
		cin >> str;
		musicinfos.push_back(str);
	}

	cout << solution(m, musicinfos) << endl;
}
