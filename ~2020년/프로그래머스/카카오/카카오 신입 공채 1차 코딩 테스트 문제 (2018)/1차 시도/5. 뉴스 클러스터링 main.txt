#include <string>
#include <algorithm>
#include <vector>

#include<iostream>

using namespace std;

int solution(string str1, string str2) {
	int answer = 0;

	vector<string> set1;
	vector<string> set2;

	int len1 = strlen(str1.c_str());
	int len2 = strlen(str2.c_str());

	int i, j;

	char temp[3];
	int ok = 0;

	for (i = 0; i < len1 - 1; i++)
	{
		ok = 0;
		for (j = 0; j < 2; j++)
		{
			if ((str1[i + j] >= 'a' && str1[i + j] <= 'z'))
			{
				temp[j] = str1[i + j] - 32;
				ok = 1;
			}
			else if ((str1[i + j] >= 'A' && str1[i + j] <= 'Z'))
			{
				temp[j] = str1[i + j];
				ok = 1;
			}
			else { ok = 0; break; }
		}
		if (ok == 1) { temp[j] = '\0'; set1.push_back(temp); }
	}

	for (i = 0; i < len2 - 1; i++)
	{
		ok = 0;
		for (j = 0; j < 2; j++)
		{
			if ((str2[i + j] >= 'a' && str2[i + j] <= 'z'))
			{
				temp[j] = str2[i + j] - 32;
				ok = 1;
			}
			else if ((str2[i + j] >= 'A' && str2[i + j] <= 'Z'))
			{
				temp[j] = str2[i + j];
				ok = 1;
			}
			else { ok = 0; break; }
		}
		if (ok == 1) { temp[j] = '\0'; set2.push_back(temp); }
	}

	int set1_size = set1.size();
	int set2_size = set2.size();

	sort(set1.begin(), set1.end());
	sort(set2.begin(), set2.end());

	for (i = 0; i < set1_size; i++)
	{
		cout << set1[i] << endl;
	}
	cout << "\n";

	for (i = 0; i < set2_size; i++)
	{
		cout << set2[i] << endl;
	}

	vector<string> union_set;
	if (set1_size > set2_size)
	{
		// copy set 1
		for (i = 0; i < set1_size; i++)
		{
			union_set.push_back(set1[i]);
		}
		// copy set 2
		for (i = 0; i < set2_size; i++)
		{
			union_set.push_back(set2[i]);
		}

		int s2_size = set2_size;

		for (i = 0; i < set1_size; i++)
		{
			for (j = 0; j < s2_size; j++)
			{
				if (union_set[i] == union_set[set1_size + j])
				{
					union_set.erase(union_set.begin() + set1_size + j);
					s2_size--;
				}
			}
		}
	}
	else
	{
		// copy set 2
		for (i = 0; i < set2_size; i++)
		{
			union_set.push_back(set2[i]);
		}
		// copy set 1
		for (i = 0; i < set1_size; i++)
		{
			union_set.push_back(set1[i]);
		}

		int s1_size = set1_size;

		for (i = 0; i < set2_size; i++)
		{
			for (j = 0; j < s1_size; j++)
			{
				if (union_set[i] == union_set[set2_size + j])
				{
					union_set.erase(union_set.begin() + set2_size + j);
					s1_size--;
				}
			}
		}
	}

	for (i = 0; i < union_set.size(); i++)
	{
		cout << union_set[i] << " ";
	}cout << endl;

	vector<string> inter_set;
	if (set1_size > set2_size)
	{
		for (i = 0; i < set1_size; i++)
		{
			for (j = 0; j < set2_size; j++)
			{
				if (set1[i] == set2[j])
				{
					inter_set.push_back(set1[i]);
					set2.erase(set2.begin() + j);
					set2_size--;
				}
			}
		}
	}
	else
	{
		for (i = 0; i < set2_size; i++)
		{
			for (j = 0; j < set1_size; j++)
			{
				if (set2[i] == set1[j])
				{
					inter_set.push_back(set2[i]);
					set1.erase(set1.begin() + j);
					set1_size--;
				}
			}
		}
	}
	

	for (i = 0; i < inter_set.size(); i++)
	{
		cout << inter_set[i] << " ";
	}cout << endl;

	double t;

	if (inter_set.size() == 0 && union_set.size() == 0) { t = 1.0; }
	else { t = inter_set.size() / (double)union_set.size(); }

	answer = t * 65536;

	return answer;
}

int main()
{
	// 'a' : 97, 'A' : 65

	string str1, str2;
	getline(cin, str1);
	getline(cin, str2);

	int ans = solution(str1, str2);

	cout << ans << endl;
}