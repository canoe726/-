/*
- 풀어야할때 알아야 할점
1. 한 칸에 여러개의 나무가 자랄 수 있다.
2. 칸마다 나이 순으로 오름차순 정렬해서 나이 많은 적은 나무부터 양분 섭취를 할 수 있도록 해준다.
3. 시간 제한이 0.3 초 이므로 vector.erase(), insert() 와 같은 연산은 사용하지 않아야 한다.
그러므로 vector<TREE> tree[11][11] 벡터를 선언해서 각 땅마다 나무를 벡터에 push_back()으로 넣는다.
해당 땅의 나이순으로 정렬 된 나무들을 순회하면서 영양이 부족하면 그 인덱스 (이후) ~ (끝) 까지 pop_back() 연산을 통해 나무를 빼낸다.
4. 나무를 빼는 연산을 하는 동시에 땅에 영양을 준다.
*/

#include<iostream>
#include<cstring>
#include<vector>
#include<algorithm>
#include<queue>

using namespace std;

typedef struct TREE {
	int x;
	int y;
	int age;
} TREE;

int N, M, K;

// (y,x), 시계방향 : 상, 상우,  우, 하우, 하, 하좌, 좌, 상좌
int dir[8][2] = { {-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1},{0,-1},{-1,-1} };

int A[11][11];
int land[11][11];

int answer = 0;

vector<TREE> tree[11][11];
vector<TREE> add;

bool cmp(TREE a, TREE b) {
	return a.age < b.age;
}

void get_food() {
	int x, y, i;
	for (x = 1; x <= N; x++) {
		for (y = 1; y <= N; y++) {
			sort(tree[x][y].begin(), tree[x][y].end(), cmp);		// 어린 나무부터 양분을 섭취할 수 있도록 해준다.

			bool is_dead = false;
			int idx = -1;
			for (i = 0; i < tree[x][y].size(); i++) {				// 양분이 충분하면 나이가 층가한다.
				int food = land[tree[x][y][i].x][tree[x][y][i].y];

				if (food >= tree[x][y][i].age) {
					land[tree[x][y][i].x][tree[x][y][i].y] -= tree[x][y][i].age;
					tree[x][y][i].age += 1;

					if (tree[x][y][i].age % 5 == 0) {
						add.push_back(tree[x][y][i]);
					}
				}
				else {			
					is_dead = true;
					idx = i;
					break;
				}
			}

			if (is_dead) {
				int len = tree[x][y].size();
				for (i = idx; i < len; i++) {				// 양분이 부족하면 죽는다.
					TREE dead = tree[x][y].back();
					tree[x][y].pop_back();
					land[dead.x][dead.y] += (dead.age / 2);			// 땅에 죽은 나무의 양분을 준다.

					answer -= 1;
				}
			}
		}
	}
}

void spread_tree() {
	while(!add.empty()) {
		TREE cur = add.back();
		add.pop_back();

		int i;
		for (i = 0; i < 8; i++) {	
			TREE next = cur;
			next.x += dir[i][1];
			next.y += dir[i][0];
			next.age = 1;

			if (next.x >= 1 && next.x <= N && next.y >= 1 && next.y <= N) {
				tree[next.x][next.y].push_back(next);
				answer += 1;
			}
		}
	}
}

void add_food() {
	int i, j;
	for (i = 1; i <= N; i++) {
		for (j = 1; j <= N; j++) {
			land[i][j] += A[i][j];
		}
	}
}

int main()	{
	memset(A, 0, sizeof(A));
	memset(land, 0, sizeof(land));

	cin >> N >> M >> K;

	int i, j;
	for (i = 1; i <= N; i++) {
		for (j = 1; j <= N; j++) {
			land[i][j] = 5;
		}
	}

	for (i = 1; i <= N; i++) {
		for (j = 1; j <= N; j++) {
			cin >> A[i][j];
		}
	}

	for (i = 0; i < M; i++) {
		int x, y, z;
		cin >> x >> y >> z;
		tree[x][y].push_back({ x,y,z });
	}

	answer = M;
	for (i = 0; i < K; i++) {
		if (answer == 0) { break; }
		get_food();					// 봄, 여름
		spread_tree();				// 가을
		add_food();					// 겨울
	}

	cout << answer << "\n";
}