/*
- 풀어야할때 알아야 할점
1. 모든 CCTV 방향의 경우의 수는 15개이다.
2. 빈 칸(0) 이면 사각 지대 이다.
3. CCTV에 따른 감시 범위를 설정하기 전에 office를 저장해야 한다.
4. CCTV에 따른 감시 범위를 설정하기 전에 CCTV의 위치를 담은 queue를 저장해야 한다.
*/

#include<iostream>
#include<cstring>
#include<queue>
#include<vector>
#include<algorithm>
#include<climits>

using namespace std;

struct INFO {
	int num;
	int y;
	int x;
};

int N, M;

int office[8][8];		// 0 : 빈 칸, 6 : 벽, 1~5 CCTV, 9 : CCTV가 감시 가능한 곳

// (y,x), 상 하 좌 우
int dir[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };

queue<INFO> pos;

vector<vector<string>> cctv(6);

int find_blind_area() {
	int ret = 0;

	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			if (office[i][j] == 0) {
				ret += 1;
			}
		}
	}

	return ret;
}

int dfs_search() {
	if (pos.empty()) {
		return find_blind_area();
	}

	int ret = INT_MAX;

	while (!pos.empty()) {
		INFO cur = pos.front();
		pos.pop();

		int i, j;
		for (i = 0; i < cctv[cur.num].size(); i++) {
			queue<INFO> temp_pos = pos;
			int temp_office[8][8];
			memcpy(temp_office, office, sizeof(office));

			// CCTV 감시 범위 설정
			for (j = 0; j < cctv[cur.num][i].size(); j++) {
				int d = cctv[cur.num][i][j] - '0';
				
				INFO next = cur;
				next.y += dir[d][0];
				next.x += dir[d][1];

				while ((next.y >= 0) && (next.y < N) &&
					   (next.x >= 0) && (next.x < M)) {

					if (office[next.y][next.x] == 6) {
						break;
					}
					if (office[next.y][next.x] == 0) {
						office[next.y][next.x] = 9;
					}

					next.y += dir[d][0];
					next.x += dir[d][1];
				}
			}

			ret = min(ret, dfs_search());

			pos = temp_pos;
			memcpy(office, temp_office, sizeof(temp_office));
		}
	}

	return ret;
}

int main() {
	memset(office, 0, sizeof(office));

	cin >> N >> M;

	cctv[1].push_back("2");			// 1번
	cctv[1].push_back("3");
	cctv[1].push_back("0");
	cctv[1].push_back("1");

	cctv[2].push_back("23");		// 2번
	cctv[2].push_back("01");

	cctv[3].push_back("02");		// 3번
	cctv[3].push_back("03");
	cctv[3].push_back("13");
	cctv[3].push_back("12");

	cctv[4].push_back("023");		// 4번
	cctv[4].push_back("013");
	cctv[4].push_back("123");
	cctv[4].push_back("012");

	cctv[5].push_back("0123");		// 5번

	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			cin >> office[i][j];

			if (office[i][j] >= 1 && office[i][j] <= 5) {
				pos.push({office[i][j], i, j});
			}
		}
	}

	// 0 의 개수 = 사각지대의 개수
	cout << dfs_search() << "\n";
}

/*
string cctv[15] = {			// 감시할 수 있는 방향
	"2",			// 1번
	"3",
	"0",
	"1",
	"23",			// 2번
	"01",
	"02",			// 3번
	"03",
	"13",
	"12",
	"023",			// 4번
	"013",
	"123",
	"012",
	"0123",			// 5번
};
*/