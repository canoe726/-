/*
- 풀어야할때 알아야 할점
1. 현재 바퀴를 기준으로 왼쪽, 오른쪽을 검사하는 while문을 만든다.
2. 1번 회전할 때 마다 모든 톱니의 값을 바꿔준다.
*/

#include<iostream>
#include<cstring>
#include<string>

using namespace std;

string wheel[4];		// A, B, C, D 톱니

void rotate_wheel(int num, int dir) {
	int i;
	int wheel_size = wheel[num].size();

	if (dir == 1) {			// 1 : 시계
		char temp = wheel[num][wheel_size - 1];
		for (i = wheel_size - 1; i > 0; i--) {
			wheel[num][i] = wheel[num][i - 1];
		}
		wheel[num][0] = temp;
	}
	else {					// -1 : 반시계
		char temp = wheel[num][0];
		for (i = 0; i < wheel_size - 1; i++) {
			wheel[num][i] = wheel[num][i + 1];
		}
		wheel[num][wheel_size - 1] = temp;
	}
}

int find_answer() {
	int ret = 0;

	if (wheel[0][0] == '1') {
		ret += 1;
	}
	if (wheel[1][0] == '1') {
		ret += 2;
	}
	if (wheel[2][0] == '1') {
		ret += 4;
	}
	if (wheel[3][0] == '1') {
		ret += 8;
	}

	return ret;
}

int main() {

	int i, j;
	for (i = 0; i < 4; i++) {
		cin >> wheel[i];		// N : 0, S : 1
	}

	int K;
	cin >> K;

	for (i = 0; i < K; i++) {
		int num, dir;
		cin >> num >> dir;		// 1 : 시계, -1 : 반시계

		int rotate[4];			// 톱니를 회전할지 체크
		memset(rotate, 0, sizeof(rotate));

		rotate[num - 1] = dir;

		int idx = num - 1;
		while (idx > 0) {		// 왼쪽으로 검사
			if (rotate[idx] && wheel[idx][6] != wheel[idx - 1][2]) {
				if (rotate[idx] == 1) {
					rotate[idx - 1] = -1;
				}
				else if (rotate[idx] == -1) {
					rotate[idx - 1] = 1;
				}
				else {
					continue;
				}
			}
			idx -= 1;
		}

		idx = num - 1;
		while (idx < 3) {		// 오른쪽으로 검사
			if (rotate[idx] && wheel[idx][2] != wheel[idx + 1][6]) {
				if (rotate[idx] == 1) {
					rotate[idx + 1] = -1;
				}
				else if(rotate[idx] == -1) {
					rotate[idx + 1] = 1;
				}
				else {
					continue;
				}
			}
			idx += 1;
		}

		for (j = 0; j < 4; j++) {
			if (rotate[j] != 0) {
				rotate_wheel(j, rotate[j]);				// 현재 톱니를 돌린다.
			}
		}
	}

	cout << find_answer() << "\n";
}