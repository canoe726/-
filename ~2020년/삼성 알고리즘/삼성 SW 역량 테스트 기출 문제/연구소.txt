/*
- 풀어야할때 알아야 할점
1. dfs_search를 통해서 벽을 세우는 모든 경우의 수를 체크한다.
2. 벽을 3개 세웠으면 bfs_search를 통해서 바이러스를 퍼트린다.
3. 바이러스를 퍼트린 후 안전 영역의 최댓값을 갱신한다.
4. 바이러스를 퍼트리기 전 맵을 저장하고 바이러스를 퍼트린 후 원상복구 시켜준다.
*/

#include<iostream>
#include<cstring>
#include<vector>
#include<algorithm>
#include<queue>

using namespace std;

int N, M;

int map[8][8];			// 0 : 빈 칸, 1 : 벽, 2 : 바이러스

// (y,x), 상 하 좌 우
int dir[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };

queue<pair<int, int>> virus;

void find_virus() {
	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			if (map[i][j] == 2) {
				virus.push(make_pair(i, j));
			}
		}
	}
}

int find_safe_area() {
	int ret = 0;

	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			if (map[i][j] == 0) {
				ret += 1;
			}
		}
	}

	return ret;
}

int bfs_search() {
	find_virus();

	while (!virus.empty()) {					// 바이러스를 퍼트린다.
		pair<int, int> cur = virus.front();
		virus.pop();

		int i;
		for (i = 0; i < 4; i++) {
			pair<int, int> next = make_pair(cur.first + dir[i][0], cur.second + dir[i][1]);

			if ((next.first >= 0) && (next.first < N) &&
				(next.second >= 0) && (next.second < M)) {

				if (map[next.first][next.second] == 0) {
					map[next.first][next.second] = 2;

					virus.push(next);
				}
			}
		}
	}

	return find_safe_area();		// 안전 영역의 크기를 구한다.
}

int dfs_search(int y, int x, int depth) {
	if (depth == 3) {						// 벽을 3칸 세우면 bfs_search로 바이러스를 퍼트림
		int temp[8][8];						// 바이러스가 퍼지기 전 맵 저장
		memcpy(temp, map, sizeof(map));

		int value = bfs_search();
		memcpy(map, temp, sizeof(temp));

		return value;
	}
	
	int ret = 0;

	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			if (map[i][j] == 0) {			// 가능한 모든 경우의 수에 대해 벽을 세운다
				map[i][j] = 1;
				ret = max(ret, dfs_search(i, j, depth + 1));
				map[i][j] = 0;
			}
		}
	}

	return ret;
}

int main() {
	memset(map, 0, sizeof(map));

	cin >> N >> M;

	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			cin >> map[i][j];
		}
	}

	cout << dfs_search(0, 0, 0) << "\n";
}