#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>

using namespace std;

int N;
int area[26][26];
bool visited[26][26];

// (y,x) : 상 하 좌 우
int dir[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };

int bfs_search(int y, int x) {
	int ret = 1;

	queue<pair<int, int>> q;
	q.push(make_pair(y, x));
	visited[y][x] = true;

	while (!q.empty()) {
		pair<int, int> cur = q.front();
		q.pop();

		// 4 방향 검사
		for (int i = 0; i < 4; i++) {
			int y = cur.first + dir[i][0];
			int x = cur.second + dir[i][1];

			// 범위를 초과한 경우
			if (y < 0 || y >= N || x < 0 || x >= N) continue;

			if (!visited[y][x] && area[y][x]) {
				q.push(make_pair(y, x));
				visited[y][x] = true;
				ret += 1;
			}
		}
	}

	return ret;
}

int main() {
	vector<int> answer;

	cin >> N;

	int i, j;
	for (i = 0; i < N; i++) {
		string input;
		cin >> input;

		for (j = 0; j < input.size(); j++) {
			area[i][j] = input[j] - '0';
		}
	}

	memset(visited, false, sizeof(visited));

	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++) {
			if (!visited[i][j] && area[i][j]) {
				answer.push_back(bfs_search(i, j));
			}
		}
	}

	cout << answer.size() << "\n";
	sort(answer.begin(), answer.end());
	for (i = 0; i < answer.size(); i++) {
		cout << answer[i] << "\n";
	}
}