#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>
#include<tuple>

using namespace std;

// 어떤 알파벳이 사용가능한지 표시
bool alphabet[26];
// 알파벳이 가지고 있는 랜덤 한 수 저장
int n_alphabet[26];

// 알파벳 단어를 숫자로 변경해서 리턴
int alpha_to_num(string str) {
	int ret = 0;

	int i, j;
	for (i = 0; i < str.size(); i++) {
		ret *= 10;
		ret += n_alphabet[str[i] - 'A'];
	}

	return ret;
}

int main() {
	vector<string> words;

	int N;
	cin >> N;

	int i, j;
	for (i = 0; i < N; i++) {
		string input;
		cin >> input;
		words.push_back(input);

		for (j = 0; j < input.size(); j++) {
			alphabet[input[j] - 'A'] = true;
		}
	}

	// 사용가능한 알파벳들로만 이루어진 집합
	vector<int> alpha;
	for (i = 0; i < 26; i++) {
		if (alphabet[i]) {
			alpha.push_back(i);
		}
	}

	int len = alpha.size();
	// 합의 최댓값을 구해야 하므로 9 부터 차례로 저장
	vector<int> rand_num;
	for (i = 9; i > 9 - len; i--) {
		rand_num.push_back(i);
	}
	sort(rand_num.begin(), rand_num.end());

	int answer = -987654321;

	do {
		memset(n_alphabet, 0, sizeof(n_alphabet));

		// 알파벳에 대응되는 랜덤 숫자 순열 대입
		for (i = 0; i < rand_num.size(); i++) n_alphabet[alpha[i]] = rand_num[i];

		// 단어의 개수만큼 합을 구함
		int temp = 0;
		for (i = 0; i < words.size(); i++) temp += alpha_to_num(words[i]);
		
		answer = max(answer, temp);

	} while (next_permutation(rand_num.begin(), rand_num.end()));

	cout << answer << "\n";
}