#include<iostream>
#include<queue>


using namespace std;

queue<int> x;
queue<int> y;

int tomato[1001][1001] = { 0 };
int visited[1001][1001] = { 0 };

int Answer = 0;

void get_ripe(int M, int N)
{
	int i;
	int x_pos, y_pos;
	int len = x.size();

	for (i = 0; i < len; i++)
	{
		x_pos = x.front();
		y_pos = y.front();

		x.pop();
		y.pop();

		// ╩С
		if (y_pos-1 >= 0)
		{
			if (visited[y_pos - 1][x_pos] == 0 )
			{
				visited[y_pos - 1][x_pos] = 1;
				
				y.push(y_pos - 1);
				x.push(x_pos);
			}
		}
		// го
		if (y_pos+1 < N)
		{
			if (visited[y_pos + 1][x_pos] == 0)
			{
				visited[y_pos + 1][x_pos] = 1;

				y.push(y_pos + 1);
				x.push(x_pos);
			}
		}
		// аб
		if (x_pos-1 >= 0)
		{
			if (visited[y_pos][x_pos - 1] == 0)
			{
				visited[y_pos][x_pos - 1] = 1;

				y.push(y_pos);
				x.push(x_pos - 1);
			}
		}
		// ©Л
		if (x_pos+1 < M)
		{
			if (visited[y_pos][x_pos + 1] == 0)
			{
				visited[y_pos][x_pos + 1] = 1;

				y.push(y_pos);
				x.push(x_pos + 1);
			}
		}
	}

	if (!x.empty())
	{
		Answer += 1;
		get_ripe(M, N);
	}
}

int main()
{
	int M, N;
	cin >> M;
	cin >> N;

	int i, j;

	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			cin >> tomato[i][j];

			if (tomato[i][j] == 1)
			{
				y.push(i);
				x.push(j);

				visited[i][j] = 1;
			}
			else if (tomato[i][j] == -1) { visited[i][j] = 1; }
		}
	}

	get_ripe(M, N);

	int check = 0;

	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			if (visited[i][j] == 0) { check = 1; }
		}
	}

	if (check == 1) { cout << "-1" << endl; }
	else { cout << Answer << endl; }

	return 0;
}