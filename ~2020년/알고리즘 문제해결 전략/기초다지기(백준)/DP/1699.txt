#include<iostream>
#include<algorithm>

using namespace std;

int dp[100001] = { 0 };

int main()
{
	int N;
	cin >> N;
	
	int i, j, number = 1;
	for (i = 1; i < 100001; i++)
	{
		// 제곱수인지 확인
		if (number*number == i)
		{
			dp[i] = 1;
			number++;
		}
		else
		{
			for (j = 1; j*j < i; j++)
			{
				if (dp[i] == 0)
				{
					dp[i] = dp[j*j] + dp[i - j];
				}
				else
				{
					dp[i] = min(dp[i], dp[j*j] + dp[i - j*j]);
				}
			}
		}
	}

	cout << dp[N] << endl;
}

43
1 4 9 16 25 36

d[43] = 
d[43 - 1^2], 
d[43 - 2^2], d[39]
d[43 - 3^2], 
d[43 - 4^2], 
d[43 - 5^2], 
d[43 - 6^2], 

d[43] = 
min(d[43], d[43 - 2^2] + 1) = 43 > 5 (d[39] + 1 = 36+1+1+1 + 1)
min(d[43], d[43 - 3^2] + 1) = 5 > 3 (d[34] + 1 = 25+9 + 1)
min(d[43], d[43 - 4^2] + 1) = 3 > 4 (d[27] + 1 = 25+1+1 + 1)

#include<iostream>
#include<algorithm>

using namespace std;

int dp[100001] = { 0 };

int main()
{
	int N;
	cin >> N;

	int i, j;
	for (i = 0; i <= N; i++)
	{
		dp[i] = i;
	}

	for (i = 2; i <= N; i++)
	{
		for (j = 2; j*j <= i; j++)
		{
			dp[i] = min(dp[i], dp[i - j * j] + 1);
		}
	}
	cout << dp[N] << endl;
}

