#include<iostream>

using namespace std;

int find_min(int a, int b)
{
	if (a > b) { return b; }
	else { return a; }
}

int main()
{
	int N;
	cin >> N;

	int house[1001][3] = { 0 };

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			int su;
			cin >> su;
			house[i][j] = su;
		}
	}

	if( N == 1 )
	{
		int min = 9999;

		for (int i = 0; i < 3; i++)
		{
			if (min > house[0][i]) { min = house[0][i]; }
		}

		cout << min << endl;
		return 0;
	}
	else if (N == 2)
	{
		int min1 = 9999;
		int min2 = 9999;

		for (int i = 0; i < 3; i++)
		{
			if (min1 > house[0][i]) { min1 = house[0][i]; }
			if (min2 > house[1][i]) { min2 = house[1][i]; }
		}

		cout << min1 + min2 << endl;
		return 0;
	}
	else
	{
		int dp[1001][3] = { 0 };

		for (int i = 1; i <= N; i++)
		{
			// R
			dp[i][0] = find_min(dp[i - 1][1], dp[i - 1][2]) + house[i - 1][0];
			// G
			dp[i][1] = find_min(dp[i - 1][0], dp[i - 1][2]) + house[i - 1][1];
			// B
			dp[i][2] = find_min(dp[i - 1][0], dp[i - 1][1]) + house[i - 1][2];
		}

		int min = find_min(find_min(dp[N][0], dp[N][1]), dp[N][2]);

		cout << min << endl;
	}

	return 0;
}


#include<iostream>
#include<algorithm>

using namespace std;

int main()
{
	int N, i, j;
	cin >> N;

	// RGB
	int house[1001][3] = { 0 };
	int dp[1001][3] = { 0 };

	for (i = 0; i < N; i++)
	{
		for (j = 0; j < 3; j++)
		{
			int su;
			cin >> su;
			house[i][j] = su;
		}
	}

	dp[0][0] = house[0][0];
	dp[0][1] = house[0][1];
	dp[0][2] = house[0][2];

	for (i = 1; i < N; i++)
	{
		dp[i][0] = min(dp[i - 1][1] , dp[i - 1][2]) + house[i][0];
		dp[i][1] = min(dp[i - 1][0] , dp[i - 1][2]) + house[i][1];
		dp[i][2] = min(dp[i - 1][0] , dp[i - 1][1]) + house[i][2];
	}

	int answer = dp[i - 1][0];

	for (j = 1; j < 3; j++)
	{
		if (answer > dp[i - 1][j])
		{
			answer = dp[i - 1][j];
		}
	}

	cout << answer << endl;

	return 0;
}