#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std;

// stiker[i][j], i가 n개 열, j가 행 (위, 아래)
int stiker[100001][2];

// d[i][j] = 2*i 스티커에서 얻을 수 있는 최대 점수,
// j=0 : i번째 열에서 위쪽 스티커만 뜯는 경우
// j=1 : i번째 열에서 아래쪽 스티커만 뜯는 경우
// j=2 : i번째 열에서 둘다 스티커를 뜯지 않는 경우
int d[1000001][3];

// j=0 일때, i-1번째 열은 스티커를 뜯지 않거나, 아래쪽만 뜯어야함
// j=1 일때, i-1번째 열은 스티커를 뜯지 않거나, 위쪽만 뜯어야함
// j=2 일때, i-1번째 열은 스티커를 뜯지 않거나, 아래쪽 또는 위쪽을 뜯어야 함

int bottom_up(int n) {
	d[0][0] = stiker[0][0];
	d[0][1] = stiker[0][1];
	d[0][2] = 0;

	d[1][0] = stiker[0][1] + stiker[1][0];
	d[1][1] = stiker[0][0] + stiker[1][1];
	d[1][2] = max(d[0][0], d[0][1]);

	for (int i = 2; i < n; i++) {
		d[i][0] = max(d[i - 1][1], d[i - 1][2]) + stiker[i][0];
		d[i][1] = max(d[i - 1][0], d[i - 1][2]) + stiker[i][1];
		d[i][2] = max(d[i - 1][0], max(d[i - 1][1], d[i - 1][2]));
	}

	return max(d[n - 1][0], max(d[n - 1][1], d[n - 1][2]));
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int T;
	cin >> T;

	for (int i = 1; i <= T; i++) {
		int n;
		cin >> n;

		for (int j = 0; j < n; j++) cin >> stiker[j][0];	// 위
		for (int j = 0; j < n; j++) cin >> stiker[j][1];	// 아래

		cout << bottom_up(n) << "\n";
	}
}