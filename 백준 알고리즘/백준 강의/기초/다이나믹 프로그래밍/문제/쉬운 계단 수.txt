#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std;

const int MOD = 1e9;

// d[i][j] = 길이가 i인 계단수의 개수, j는 계단수의 마지막에 오는 수
long long d[101][10];

// 0으로 시작하는 수는 없기 때문에 d[1][0] = 0 이 된다.
// j=0 일때, d[i-1][j-1] 은 구할 수 없다.
// j=9 일때, d[i-1][j+1] 은 구할 수 없다.
// 정답을 구할 때, 모든 수를 다 더하고 마지막에 나머지 연산을 해야한다.

long long bottom_up(int n) {
	
	for (int i = 1; i <= n; i++) {
		for (int j = 0; j <= 9; j++) {
			if (i == 1) {
				if (j == 0) d[i][j] = 0;
				else		d[i][j] = 1;
			}
			else {
				if		(j == 0)	d[i][j] = d[i - 1][j + 1];
				else if (j == 9)	d[i][j] = d[i - 1][j - 1];
				else				d[i][j] = (d[i - 1][j - 1] + d[i - 1][j + 1]) % MOD;
			}
		}
	}
	
	long long answer = 0;
	for (int i = 0; i < 10; i++) (answer += d[n][i]);

	return answer % MOD;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N;
	cin >> N;

	cout << bottom_up(N) << "\n";
}