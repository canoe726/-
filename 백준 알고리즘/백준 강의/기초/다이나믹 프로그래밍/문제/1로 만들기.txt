#include<iostream>
#include<cstring>

using namespace std;

int d[1000001];

int top_down(int N) {
	if (N == 1) return 0;
	if (d[N] != -1) return d[N];

	d[N] = top_down(N - 1) + 1;

	if (N % 2 == 0) {
		int temp = top_down(N / 2) + 1;
		if (d[N] > temp) d[N] = temp;
	}

	if (N % 3 == 0) {
		int temp = top_down(N / 3) + 1;
		if (d[N] > temp) d[N] = temp;
	}
	
	return d[N];
}

int bottom_up(int N) {
	d[1] = 0;

	for (int i = 2; i <= N; i++) {
		d[i] = d[i - 1] + 1;
		
		if (i % 2 == 0) {
			int temp = d[i / 2] + 1;
			if (d[i] > temp) d[i] = temp;
		}

		if (i % 3 == 0) {
			int temp = d[i / 3] + 1;
			if (d[i] > temp) d[i] = temp;
		}
	}

	return d[N];
}

int main() {
	memset(d, -1, sizeof(d));

	int N;
	cin >> N;

	cout << top_down(N) << endl;
	// cout << bottom_up(N) << endl;
}