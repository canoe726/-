#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>

using namespace std;

const int MAX = 200000;

bool visited[MAX + 1];
int dist[MAX + 1];

int bfs_search(int N, int K) {
	queue<int> q;
	q.push(N);
	visited[N] = true;
	dist[N] = 0;

	while (!q.empty()) {
		int now = q.front();
		q.pop();

		// X - 1 로 이동하는 경우
		if (now - 1 >= 0) {
			if (!visited[now - 1]) {
				q.push(now - 1);
				visited[now - 1] = true;
				dist[now - 1] = dist[now] + 1;
			}
		}
		// X + 1 로 이동하는 경우
		if (now + 1 < MAX) {
			if (!visited[now + 1]) {
				q.push(now + 1);
				visited[now + 1] = true;
				dist[now + 1] = dist[now] + 1;
			}
		}
		// X * 2 로 이동하는 경우
		if (now * 2 < MAX) {
			if (!visited[now * 2]) {
				q.push(now * 2);
				visited[now * 2] = true;
				dist[now * 2] = dist[now] + 1;
			}
		}
	}

	return dist[K];
}

int main() {
	int N, K;
	cin >> N >> K;
	
	cout << bfs_search(N, K) << "\n";
}