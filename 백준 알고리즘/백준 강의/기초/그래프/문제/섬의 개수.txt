#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>

using namespace std;

int area[51][51];
bool visited[51][51];

// (y,x) : 상 하 좌 우 상좌 상우 하좌 하우
int dir[8][2] = { {-1,0},{1,0},{0,-1},{0,1},{-1,-1},{-1,1},{1,-1},{1,1} };

void bfs_search(int y, int x, int w, int h) {
	queue<pair<int, int>> q;
	q.push(make_pair(y, x));
	visited[y][x] = true;

	while (!q.empty()) {
		pair<int, int> cur = q.front();
		q.pop();

		// 8 방향 검사
		for (int i = 0; i < 8; i++) {
			int y = cur.first + dir[i][0];
			int x = cur.second + dir[i][1];

			// 범위를 초과한 경우
			if (y < 0 || y >= h || x < 0 || x >= w) continue;

			if (!visited[y][x] && area[y][x]) {
				q.push(make_pair(y, x));
				visited[y][x] = true;
			}
		}
	}
}

int main() {
	int w, h;
	cin >> w >> h;

	while (w != 0 && h != 0) {
		int i, j;
		for (i = 0; i < h; i++) {
			for (j = 0; j < w; j++) {
				cin >> area[i][j];
			}
		}

		int answer = 0;
		memset(visited, false, sizeof(visited));

		for (i = 0; i < h; i++) {
			for (j = 0; j < w; j++) {
				if (!visited[i][j] && area[i][j]) {
					bfs_search(i, j, w, h);
					answer += 1;
				}
			}
		}
		
		cout << answer << "\n";

		cin >> w >> h;
	}
}