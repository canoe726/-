#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>
#include<tuple>

using namespace std;

int maze[1001][1001];
// 행, 열, 벽 [z] = 0, 1 로 구성되어 있음
// 0 이면 벽을 부순적이 없음, 1이면 있음
int dist[1001][1001][2];

// (y,x) : 상 하 좌 우
int dir[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };

int bfs_search(int N, int M) {
	memset(dist, 0, sizeof(dist));

	int ret = 0;

	queue<tuple<int, int, int>> q;
	q.push(make_tuple(0, 0, 0));
	dist[0][0][0] = 1;
	
	while (!q.empty()) {
		int x, y, z;
		tie(x, y, z) = q.front();
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx, ny;
			nx = x + dir[i][0];
			ny = y + dir[i][1];

			// 미로 범위 초과 경우
			if (nx < 0 || nx >= N || ny < 0 || ny >= M) continue;

			// 다음칸이 벽이 아닌 빈공간이면서, 방문하지 않은 경우
			if (maze[nx][ny] == 0 && dist[nx][ny][z] == 0) {
				q.push(make_tuple(nx, ny, z));
				dist[nx][ny][z] = dist[x][y][z] + 1;
			}
			// 벽을 부순적이 없을 때, 다음칸이 벽인 경우, 또한 이전에 벽을 부순적이 없을 경우
			if (z == 0 && maze[nx][ny] == 1 && dist[nx][ny][z + 1] == 0) {
				q.push(make_tuple(nx, ny, z + 1));
				dist[nx][ny][z + 1] = dist[x][y][z] + 1;
			}
		}
	}

	if (dist[N - 1][M - 1][0] != 0 && dist[N - 1][M - 1][1] != 0) {
		return min(dist[N - 1][M - 1][0], dist[N - 1][M - 1][1]);
	}
	else if (dist[N - 1][M - 1][0]) {
		return dist[N - 1][M - 1][0];
	}
	else if (dist[N - 1][M - 1][1]) {
		return dist[N - 1][M - 1][1];
	}
	else {
		return -1;
	}
}

int main() {
	memset(maze, 0, sizeof(maze));

	int N, M;
	cin >> N >> M;

	int i, j;
	for (i = 0; i < N; i++) {
		string input;
		cin >> input;
		for (j = 0; j < input.size(); j++) {
			maze[i][j] = input[j] - '0';
		}
	}

	cout << bfs_search(N, M) << "\n";
}