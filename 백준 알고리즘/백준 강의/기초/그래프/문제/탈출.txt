#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>
#include<tuple>

using namespace std;

char area[51][51];

queue<pair<int, int>> q;

// 방문하지 않으면 -1, 방문하면 0 이상
int water[51][51];
int dist[51][51];

// (y,x) : 상 하 좌 우
int dir[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };

// sx, sy : 고슴도치 위치
// dx, dy : 비버의 굴 위치
int bfs_search(int R, int C, int sx, int sy, int dx, int dy) {	
	int i;
	// 먼저 물이 가득찰 수 있는 시간을 잰다.
	while (!q.empty()) {
		pair<int, int> cur = q.front();
		q.pop();

		for (i = 0; i < 4; i++) {
			int y = cur.first + dir[i][0];
			int x = cur.second + dir[i][1];

			if (y < 0 || y >= R || x < 0 || x >= C) continue;
			if (water[y][x] != -1) continue;
			if (area[y][x] == 'X' || area[y][x] == 'S' || area[y][x] == 'D') continue;

			q.push(make_pair(y, x));
			water[y][x] = water[cur.first][cur.second] + 1;
		}
	}
	   
	// 고슴도치가 물이 차기전 이동할 수 있는지 검사한다.
	q.push(make_pair(sy, sx));
	dist[sy][sx] = 0;

	while (!q.empty()) {
		int cy, cx;
		tie(cy, cx) = q.front();
		q.pop();
		
		for (i = 0; i < 4; i++) {
			int ny, nx;
			ny = cy + dir[i][0];
			nx = cx + dir[i][1];

			// 고슴도치가 지나갈 수 없는 경우
			if (ny < 0 || ny >= R || nx < 0 || nx >= C) continue;
			if (dist[ny][nx] != -1) continue;
			if (area[ny][nx] == 'X') continue;
			if (water[ny][nx] != -1 && dist[cy][cx] + 1 >= water[ny][nx]) continue;
			
			q.push(make_pair(ny, nx));
			dist[ny][nx] = dist[cy][cx] + 1;
		}
	}

	return dist[dy][dx];
}

int main() {
	memset(water, -1, sizeof(water));
	memset(dist, -1, sizeof(dist));

	int R, C;
	cin >> R >> C;

	int i, j;
	int sx, sy, dx, dy;
	for (i = 0; i < R; i++) {
		string input;
		cin >> input;
		for (j = 0; j < input.size(); j++) {
			area[i][j] = input[j];
			// 물은 여러 군데서 동시에 찰 수 있다.
			if (area[i][j] == '*') {
				q.push(make_pair(i, j));
				water[i][j] = 0;
			}
			if (area[i][j] == 'S') {
				sy = i;
				sx = j;
			}
			if (area[i][j] == 'D') {
				dy = i;
				dx = j;
			}
		}
	}

	int answer = bfs_search(R, C, sx, sy, dx, dy);
	if (answer == -1) {
		cout << "KAKTUS" << "\n";
	}
	else {
		cout << answer << "\n";
	}
}