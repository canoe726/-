#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<string>
#include<queue>
#include<tuple>
#include<map>

using namespace std;

const int LEN = 200000;

// 방법의 수
int cnt[LEN + 1];
int dist[LEN + 1];
bool visited[LEN + 1];

void bfs(int N, int K) {
	queue<int> q;
	q.push(N);
	cnt[N] = 1;
	dist[N] = 0;
	visited[N] = true;

	while (!q.empty()) {
		int cur = q.front();
		q.pop();

		for (int next : {cur - 1, cur + 1, cur * 2}) {
			if (next >= 0 && next <= LEN) {
				if (!visited[next]) {
					q.push(next);
					cnt[next] = cnt[cur];
					dist[next] = dist[cur] + 1;
					visited[next] = true;
				}
				// 방문했지만 같은 숫자로 도달한 경우, 방법의 수 증가
				else {
					if (dist[next] == dist[cur] + 1) {
						cnt[next] += cnt[cur];
					}
				}
			}
		}
	}

	cout << dist[K] << "\n";
	cout << cnt[K] << "\n";
}

int main() {
	int N, K;
	cin >> N >> K;

	bfs(N, K);
}
