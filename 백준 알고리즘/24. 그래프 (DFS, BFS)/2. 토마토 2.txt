#include<iostream>
#include<queue>


using namespace std;

queue<int> x;
queue<int> y;
queue<int> z;

int tomato[101][101][101] = { 0 };
int visited[101][101][101] = { 0 };

int Answer = 0;

void get_ripe(int M, int N, int H)
{
	int i;
	int x_pos, y_pos, z_pos;
	int len = x.size();

	for (i = 0; i < len; i++)
	{
		x_pos = x.front();
		y_pos = y.front();
		z_pos = z.front();

		x.pop();
		y.pop();
		z.pop();

		// 상
		if (y_pos - 1 >= 0)
		{
			if (visited[z_pos][y_pos - 1][x_pos] == 0)
			{
				visited[z_pos][y_pos - 1][x_pos] = 1;

				z.push(z_pos);
				y.push(y_pos - 1);
				x.push(x_pos);
			}
		}
		// 하
		if (y_pos + 1 < N)
		{
			if (visited[z_pos][y_pos + 1][x_pos] == 0)
			{
				visited[z_pos][y_pos + 1][x_pos] = 1;

				z.push(z_pos);
				y.push(y_pos + 1);
				x.push(x_pos);
			}
		}
		// 좌
		if (x_pos - 1 >= 0)
		{
			if (visited[z_pos][y_pos][x_pos - 1] == 0)
			{
				visited[z_pos][y_pos][x_pos - 1] = 1;

				z.push(z_pos);
				y.push(y_pos);
				x.push(x_pos - 1);
			}
		}
		// 우
		if (x_pos + 1 < M)
		{
			if (visited[z_pos][y_pos][x_pos + 1] == 0)
			{
				visited[z_pos][y_pos][x_pos + 1] = 1;

				z.push(z_pos);
				y.push(y_pos);
				x.push(x_pos + 1);
			}
		}
		// 위
		if (z_pos - 1 >= 0)
		{
			if (visited[z_pos - 1][y_pos][x_pos] == 0)
			{
				visited[z_pos - 1][y_pos][x_pos] = 1;

				z.push(z_pos - 1);
				y.push(y_pos);
				x.push(x_pos);
			}
		}
		// 아래
		if (z_pos + 1 < H)
		{
			if (visited[z_pos + 1][y_pos][x_pos] == 0)
			{
				visited[z_pos + 1][y_pos][x_pos] = 1;

				z.push(z_pos + 1);
				y.push(y_pos);
				x.push(x_pos);
			}
		}
	}

	if (!x.empty())
	{
		Answer += 1;
		get_ripe(M, N, H);
	}
}

int main()
{
	int M, N, H;
	cin >> M;
	cin >> N;
	cin >> H;

	int i, j, k;

	for (i = 0; i < H; i++)
	{
		for (j = 0; j < N; j++)
		{
			for (k = 0; k < M; k++)
			{
				cin >> tomato[i][j][k];

				if (tomato[i][j][k] == 1)
				{
					z.push(i);
					y.push(j);
					x.push(k);

					visited[i][j][k] = 1;
				}
				else if (tomato[i][j][k] == -1) { visited[i][j][k] = 1; }
			}
		}
	}

	get_ripe(M, N, H);

	int check = 0;

	for (i = 0; i < H; i++)
	{
		for (j = 0; j < N; j++)
		{
			for (k = 0; k < M; k++)
			{
				if (visited[i][j][k] == 0) { check = 1; }
			}
		}
	}

	if (check == 1) { cout << "-1" << endl; }
	else { cout << Answer << endl; }

	return 0;
}