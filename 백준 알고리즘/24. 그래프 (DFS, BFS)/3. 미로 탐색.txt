#include<iostream>
#include<string>
#include<queue>

using namespace std;

int maze[102][102];
int visited[102][102];
// up, left, down, right
int one[4][2] = { {-1,0}, {0,-1}, {1,0}, {0,1} };

void bfs_search(int row, int col, int N, int M)
{
	// row, col
	queue<pair<int,int>> q;

	q.push(pair<int, int>(row, col));
	visited[row][col] = 1;

	while (!q.empty())
	{
		int r1 = q.front().first;
		int c1 = q.front().second;
		q.pop();

		if (r1 == N && c1 == M) { break; }

		int i;
		for (i = 0; i < 4; i++)
		{
			int r2 = r1 + one[i][0];
			int c2 = c1 + one[i][1];

			if (r2 > 0 && r2 <= N && c2>0 && c2 <= M) 
			{
				if (maze[r2][c2] == 1 && visited[r2][c2] == 0)
				{
					q.push(pair<int, int>(r2, c2));
					visited[r2][c2] = visited[r1][c1] + 1;
				}
			}
		}

	}
}

int main()
{
	int N, M;
	cin >> N >> M;

	int i, j;
	for (i = 1; i <= N; i++)
	{
		string str;
		cin >> str;

		for (j = 1; j <= M; j++)
		{
			maze[i][j] = str[j - 1] - '0';
		}
	}

	visited[1][1] = 1;
	bfs_search(1, 1, N, M);

	cout << visited[N][M] << '\n';
}

S