#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>

using namespace std;

vector<vector<int>> graph(32001);
int num_of_edges[32001];
priority_queue<int, vector<int>, greater<int>> pq;

void topological_sort(int size)
{
	int i, value, g_value;
	for (i = 1; i <= size; i++)
	{
		if (num_of_edges[i] == 0) { pq.push(i); }
	}
	
	while(!pq.empty())
	{
		value = pq.top();
		pq.pop();
		cout << value << ' ';

		for (i = 0; i < graph[value].size(); i++)
		{
			g_value = graph[value][i];
			num_of_edges[g_value]--;

			if (num_of_edges[g_value] == 0)
			{
				pq.push(g_value);
			}
		}
	}
}

int main()
{
	int N, M;
	cin >> N >> M;

	int i;
	for (i = 0; i < M; i++)
	{
		int left, right;
		cin >> left >> right;

		graph[left].push_back(right);
		num_of_edges[right]++;
	}

	topological_sort(N);
	cout << '\n';
}



