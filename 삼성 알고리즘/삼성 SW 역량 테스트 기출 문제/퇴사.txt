/*
- 풀어야할때 알아야 할점
1. N일 까지 일할 수 있는 최댓값을 구해준다.
2. 재귀적으로 (현재일 + Ti일) ~ N일 까지 이동하면서 모든 경우의 수를 찾는다. 
*/

#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std;

struct INFO {
	int day;
	int cost;
};

INFO jobs[16];

int N;

int dfs_search(int cur_day, int cost) {
	if (cur_day > N) {
		return cost;
	}

	int ret = 0;

	int i;
	for (i = cur_day; i <= N; i++) {
		if (i + jobs[cur_day].day > N + 1) {
			ret = max(ret, dfs_search(i + jobs[cur_day].day, cost));
		}
		else {
			ret = max(ret, dfs_search(i + jobs[cur_day].day, cost + jobs[cur_day].cost));
		}
	}

	return ret;
}

int main() {
	memset(jobs, {}, sizeof(jobs));

	cin >> N;

	int i;
	for (i = 1; i <= N; i++) {
		INFO info;
		cin >> info.day;
		cin >> info.cost;

		jobs[i] = info;
	}

	int answer = -1;
	for (i = 1; i <= N; i++) {
		answer = max(answer, dfs_search(i, 0));
	}

	cout << answer << "\n";
}