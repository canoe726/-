#include<iostream>

using namespace std;

int field[100][100];
int answer = 0;

void width_forward(int r, int N, int L)
{
	int i, j;
	int cur = field[r][0];
	int len = 1;
	int check = 1;

	for (i = 1; i < N; i++)
	{
		if (cur == field[r][i])
		{
			cur = field[r][i];
			len++;
		}
		else
		{
			if ( abs(cur - field[r][i]) < 2)
			{
				if (cur > field[r][i])
				{
					int size = 0;
					for (j = i; j < N; j++)
					{
						if (field[r][i] == field[r][j])
						{
							size++;
						}
						else
						{
							break;
						}
					}
					if (size >= L)
					{
						cur = field[r][i];
						i += (L - 1);
						len = 0;
					}
					else
					{
						check = 0;
						break;
					}
				}
				else
				{
					if (len >= L)
					{
						cur = field[r][i];
						len = 1;
					}
					else
					{
						check = 0;
						break;
					}
				}
			}
			else
			{
				check = 0;
				break;
			}			
		}
	}

	if (check == 1) { answer++; }
}

void height_forward(int r, int N, int L)
{
	int i, j;
	int cur = field[0][r];
	int len = 1;
	int check = 1;

	for (i = 1; i < N; i++)
	{
		if (cur == field[i][r])
		{
			cur = field[i][r];
			len++;
		}
		else
		{
			if (abs(cur - field[i][r]) < 2)
			{
				if (cur > field[i][r])
				{
					int size = 0;
					for (j = i; j < N; j++)
					{
						if (field[i][r] == field[j][r])
						{
							size++;
						}
						else
						{
							break;
						}
					}
					if (size >= L)
					{
						cur = field[i][r];
						i += (L - 1);
						len = 0;
					}
					else
					{
						check = 0;
						break;
					}
				}
				else
				{
					if (len >= L)
					{
						cur = field[i][r];
						len = 1;
					}
					else
					{
						check = 0;
						break;
					}
				}
			}
			else
			{
				check = 0;
				break;
			}
		}
	}

	if (check == 1) { answer++; }
}

int main()
{
	int N, L;
	cin >> N >> L;

	int i, j;
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < N; j++)
		{
			int su;
			cin >> su;
			field[i][j] = su;
		}
	}

	for (i = 0; i < N; i++)
	{
		width_forward(i, N, L);
		height_forward(i, N, L);
	}

	cout << answer << endl;
}