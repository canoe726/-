#include<iostream>
#include<string>

using namespace std;

// N : 0, S : 1
int gear[4][8] = { 0 };
int status[4] = { 0 };
int answer = 0;

int find_answer()
{
	int result = 0;

	int i;
	for (i = 0; i < 4; i++)
	{
		if (i == 0)
		{
			if (gear[i][0] == 1)
			{
				result += 1;
			}
		}
		else if (i == 1)
		{
			if (gear[i][0] == 1)
			{
				result += 2;
			}
		}
		else if (i == 2)
		{
			if (gear[i][0] == 1)
			{
				result += 4;
			}
		}
		else if (i == 3)
		{
			if (gear[i][0] == 1)
			{
				result += 8;
			}
		}
	}

	return result;
}

void clockwise_rotate(int n)
{
	int i;
	int temp = gear[n][7];
	for (i = 7; i > 0; i--)
	{
		gear[n][i] = gear[n][i - 1];
	}
	gear[n][0] = temp;
}

void anti_clockwise_rotate(int n)
{
	int i;
	int temp = gear[n][0];
	for (i = 1; i < 8; i++)
	{
		gear[n][i - 1] = gear[n][i];
	}
	gear[n][7] = temp;
}

void gear_function(int num, int dir)
{
	// dir : 1 -> clockwise, -1 -> anti-clockwise
	// gear compare : left_side -> 2, right_side -> 6

	// check gear
	int left = 0, right = 0;
	// left
	if ((num - 1) >= 0)
	{
		if (status[num - 1] == 0)
		{
			if (gear[num - 1][2] != gear[num][6])
			{
				left = 1;
			}
		}
	}
	// right
	if ((num + 1) < 4)
	{
		if (status[num + 1] == 0)
		{
			if (gear[num][2] != gear[num + 1][6])
			{
				right = 1;
			}
		}
	}

	// cur rotate
	if (dir == 1)
	{
		clockwise_rotate(num);
	}
	else if (dir == -1)
	{
		anti_clockwise_rotate(num);
	}
	status[num] = 1;

	if (left == 1)
	{
		gear_function(num - 1, -dir);
	}
	if (right == 1)
	{
		gear_function(num + 1, -dir);
	}
}

int main()
{
	int i, j;
	for (i = 0; i < 4; i++)
	{
		string su;
		cin >> su;

		for (j = 0; j < 8; j++)
		{
			gear[i][j] = su[j] - '0';
		}
	}

	int K, num, dir;
	cin >> K;
	for (i = 0; i < K; i++)
	{
		cin >> num >> dir;
		memset(status, 0, sizeof(status));
		gear_function(num - 1, dir);
	}

	answer = find_answer();
	cout << answer << '\n';
}