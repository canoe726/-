/*
- 풀어야할때 알아야 할점
1. 도형을 모두 회전, 대칭 시켰을 때 나오는 경우의 수는 19개 이다.
2. 모든 회전, 대칭한 배열에 대해서 N, M 만큼 이동시켰을 때 범위내에 있으면 값을 더해서 최댓값을 구한다.
3. 4개 원소값을 다 더하지 않으면 어차피 최댓값이 될 수 없다.
*/

// ver 1
#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std;

int N, M;

int paper[500][500];

// (y,x) 가로, 세로 순
int shape[19][4][2] = {
	{ {0,0},{1,0},{2,0},{3,0} },  // ㅡ
	{ {0,0},{0,1},{0,2},{0,3} },
	{ {0,0},{0,1},{1,0},{1,1} },  // ㅁ
	{ {0,0},{1,0},{2,0},{2,1} },  // ㄴ
	{ {0,0},{0,1},{0,2},{1,0} },
	{ {0,0},{0,1},{1,1},{2,1} },
	{ {0,2},{1,0},{1,1},{1,2} },
	{ {0,1},{1,1},{2,0},{2,1} },
	{ {0,0},{1,0},{1,1},{1,2} },
	{ {0,0},{0,1},{1,0},{2,0} },
	{ {0,0},{0,1},{0,2},{1,2} },
	{ {0,0},{0,1},{1,1},{1,2} },  // z
	{ {0,1},{1,0},{1,1},{2,0} },
	{ {0,0},{1,0},{1,1},{2,1} },
	{ {0,1},{0,2},{1,0},{1,1} },
	{ {0,0},{0,1},{0,2},{1,1} },  // ㅜ
	{ {0,1},{1,0},{1,1},{2,1} },
	{ {0,1},{1,0},{1,1},{1,2} },
	{ {0,0},{1,0},{1,1},{2,0} },
};

int find_max_value(int idx) {
	int ret = 0;

	int i, j, k;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			int sum = 0;

			for (k = 0; k < 4; k++) {
				int cur_y = shape[idx][k][0] + i;
				int cur_x = shape[idx][k][1] + j;

				if ((cur_y >= 0 && cur_y < N) &&
					(cur_x >= 0 && cur_x < M)) {

					sum += paper[cur_y][cur_x];
				}
			}
			ret = max(ret, sum);
		}
	}

	return ret;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	memset(paper, 0, sizeof(paper));

	cin >> N >> M;

	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			cin >> paper[i][j];
		}
	}

	int answer = 0;
	for (i = 0; i < 19; i++) {
		answer = max(answer, find_max_value(i));
	}

	cout << answer << "\n";
}

// ver 2
#include<iostream>
#include<cstring>
#include<queue>
#include<algorithm>

using namespace std;

int N, M;

int paper[500][500];

// (y,x) 가로, 세로 순
int shape[19][4][2] = {
	{ {0,0}, {0,1}, {1,0}, {1,1} }, // ㅁ
	{ {0,0}, {0,1}, {0,2}, {0,3} }, // ㅡ
	{ {0,0}, {1,0}, {2,0}, {3,0} },
	{ {0,0}, {0,1}, {0,2}, {1,0} }, // ㄴ
	{ {0,2}, {1,0}, {1,1}, {1,2} },
	{ {0,0}, {1,0}, {1,1}, {1,2} },
	{ {0,0}, {0,1}, {0,2}, {1,2} },
	{ {0,0}, {1,0}, {2,0}, {2,1} },
	{ {0,0}, {0,1}, {1,1}, {2,1} },
	{ {0,0}, {0,1}, {1,0}, {2,0} },
	{ {0,1}, {1,1}, {2,0}, {2,1} },
	{ {0,0}, {1,0}, {1,1}, {2,1} }, // Z
	{ {0,1}, {1,0}, {1,1}, {2,0} },
	{ {0,1}, {0,2}, {1,0}, {1,1} },
	{ {0,0}, {0,1}, {1,1}, {1,2} },
	{ {0,0}, {0,1}, {0,2}, {1,1} }, // ㅗ
	{ {0,1}, {1,0}, {1,1}, {1,2} },
	{ {0,1}, {1,0}, {1,1}, {2,1} },
	{ {0,0}, {1,0}, {1,1}, {2,0} }
};

int get_value(int y, int x) {
	int ret = 0;

	int i, j;
	for (i = 0; i < 19; i++) {
		int sum = 0;
		for (j = 0; j < 4; j++) {
			int cur_y = shape[i][j][0] + y;
			int cur_x = shape[i][j][1] + x;

			if ((cur_y >= 0 && cur_y < N) &&
				(cur_x >= 0 && cur_x < M)) {
				sum += paper[cur_y][cur_x];
			}
		}
		ret = max(ret, sum);
	}

	return ret;
}

int find_max_value() {
	int ret = 0;

	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			ret = max(ret, get_value(i, j));
		}
	}

	return ret;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	memset(paper, 0, sizeof(paper));

	cin >> N >> M;

	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			cin >> paper[i][j];
		}
	}

	cout << find_max_value() << "\n";
}