/*
- 풀어야할때 알아야 할점
1. N/2 개 만큼의 팀을 2개 만들어야 한다.
2. N/2 개 만큼의 팀원들의 능력치를 2중 for 문으로 모두 더해주어야 한다.
3. 재귀적으로 탐색해서 모든 경우의 수를 검사한다. (조합 X)
*/

#include<iostream>
#include<cstring>
#include<vector>
#include<algorithm>
#include<cmath>
#include<climits>

using namespace std;

int level[20][20];
int choose[20];

int N;

int find_min_value() {
	int s_total = 0;
	int l_total = 0;

	vector<int> start_team;
	vector<int> link_team;

	int i, j;
	for (i = 0; i < N; i++) {
		if (choose[i]) {
			start_team.push_back(i);
		}
		else {
			link_team.push_back(i);
		}
	}

	for (i = 0; i < start_team.size() - 1; i++) {
		for (j = i + 1; j < start_team.size(); j++) {
			s_total += level[start_team[i]][start_team[j]];
			s_total += level[start_team[j]][start_team[i]];

			l_total += level[link_team[i]][link_team[j]];
			l_total += level[link_team[j]][link_team[i]];
		}
	}

	return abs(s_total - l_total);
}

int dfs_search(int idx, int cnt) {
	if (cnt >= (N / 2)) {
		return find_min_value();
	}

	int ret = INT_MAX;

	int i;
	for (i = idx; i < N; i++) {
		choose[i] = 1;
		ret = min(ret, dfs_search(i + 1, cnt + 1));
		choose[i] = 0;
	}

	return ret;
}

int main() {
	memset(level, 0, sizeof(level));
	memset(choose, 0, sizeof(choose));

	cin >> N;

	int i, j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++) {
			cin >> level[i][j];
		}
	}

	cout << dfs_search(0, 0) << "\n";
}

/*
6
   1 2 3 4 5 6
1 0 1 2 3 4 5
2 6 0 7 8 9 1
3 2 3 0 4 5 6
4 7 8 9 0 1 2
5 3 4 5 6 0 7
6 8 9 1 2 3 0

1,2,3,4

1,2 / 2,1 / 1,3 / 3,1 / 2,3 / 3,2
*/