#include<iostream>
#include<vector>

using namespace std;

vector<pair<int, int>> v;
int field[8][8];
int spread_field[8][8];
int temp[8][8];
int answer = 0;

void copy_wall(int (*a)[8], int (*b)[8], int N, int M)
{
	int i, j;
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			a[i][j] = b[i][j];
		}
	}
}

void count_zero(int N, int M)
{
	int count = 0;
	int i, j;
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			if (spread_field[i][j] == 0)
			{
				count++;
			}
		}
	}

	if (count > answer)
	{
		answer = count;
	}
}

void DFS(int y, int x, int N, int M)
{
	// ╩С
	if ((y + 1) > -1 && (y + 1) < N)
	{
		if (spread_field[y + 1][x] == 0)
		{
			spread_field[y + 1][x] = 2;
			DFS(y + 1, x, N, M);
		}
	}
	// го
	if ((y - 1) > -1 && (y - 1) < N)
	{
		if (spread_field[y - 1][x] == 0)
		{
			spread_field[y - 1][x] = 2;
			DFS(y - 1, x, N, M);
		}
	}
	// аб
	if ((x - 1) > -1 && (x - 1) < M)
	{
		if (spread_field[y][x - 1] == 0)
		{
			spread_field[y][x - 1] = 2;
			DFS(y, x - 1, N, M);
		}
	}
	// ©Л
	if ((x + 1) > -1 && (x + 1) < M)
	{
		if (spread_field[y][x + 1] == 0)
		{
			spread_field[y][x + 1] = 2;
			DFS(y, x + 1, N, M);
		}
	}
}

void count_virus(int N, int M)
{
	int i, j;
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			if (field[i][j] == 2)
			{
				v.push_back(pair<int, int>(i, j));
			}
		}
	}
}

void spread_virus(int N, int M)
{
	int i;

	copy_wall(spread_field, temp, N, M);

	for(i=0; i<v.size(); i++)
	{
		DFS(v[i].first, v[i].second, N, M);
	}
}

void build_wall(int N, int M, int num)
{	
	int i, j;
	
	if (num == 3)
	{
		spread_virus(N, M);
		count_zero(N, M);
		return;
	}

	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			if (temp[i][j] == 0)
			{
				temp[i][j] = 1;
				build_wall(N, M, num + 1);
				temp[i][j] = 0;
			}
		}
	}
}

int main()
{
	int N, M;
	cin >> N >> M;
	
	int i, j;
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			int su;
			cin >> su;
			field[i][j] = su;
		}
	}

	count_virus(N, M);
	copy_wall(temp, field, N, M);
	build_wall(N, M, 0);
	
	cout << answer << '\n';
}